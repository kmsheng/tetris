!function(n){var t={};function e(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=n,e.c=t,e.d=function(n,t,r){e.o(n,t)||Object.defineProperty(n,t,{configurable:!1,enumerable:!0,get:r})},e.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="/dist/",e(e.s=13)}([function(n,t,e){var r,o,i={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),a=function(n){var t={};return function(n){if("function"==typeof n)return n();if(void 0===t[n]){var e=function(n){return document.querySelector(n)}.call(this,n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}}(),c=null,d=0,l=[],u=e(10);function p(n,t){for(var e=0;e<n.length;e++){var r=n[e],o=i[r.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](r.parts[s]);for(;s<r.parts.length;s++)o.parts.push(g(r.parts[s],t))}else{var a=[];for(s=0;s<r.parts.length;s++)a.push(g(r.parts[s],t));i[r.id]={id:r.id,refs:1,parts:a}}}}function f(n,t){for(var e=[],r={},o=0;o<n.length;o++){var i=n[o],s=t.base?i[0]+t.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};r[s]?r[s].parts.push(a):e.push(r[s]={id:s,parts:[a]})}return e}function h(n,t){var e=a(n.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===n.insertAt)r?r.nextSibling?e.insertBefore(t,r.nextSibling):e.appendChild(t):e.insertBefore(t,e.firstChild),l.push(t);else if("bottom"===n.insertAt)e.appendChild(t);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(n.insertInto+" "+n.insertAt.before);e.insertBefore(t,o)}}function m(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var t=l.indexOf(n);t>=0&&l.splice(t,1)}function b(n){var t=document.createElement("style");return n.attrs.type="text/css",v(t,n.attrs),h(n,t),t}function v(n,t){Object.keys(t).forEach(function(e){n.setAttribute(e,t[e])})}function g(n,t){var e,r,o,i;if(t.transform&&n.css){if(!(i=t.transform(n.css)))return function(){};n.css=i}if(t.singleton){var s=d++;e=c||(c=b(t)),r=w.bind(null,e,s,!1),o=w.bind(null,e,s,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(n){var t=document.createElement("link");return n.attrs.type="text/css",n.attrs.rel="stylesheet",v(t,n.attrs),h(n,t),t}(t),r=function(n,t,e){var r=e.css,o=e.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=u(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([r],{type:"text/css"}),a=n.href;n.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,e,t),o=function(){m(e),e.href&&URL.revokeObjectURL(e.href)}):(e=b(t),r=function(n,t){var e=t.css,r=t.media;r&&n.setAttribute("media",r);if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}.bind(null,e),o=function(){m(e)});return r(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;r(n=t)}else o()}}n.exports=function(n,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=s()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var e=f(n,t);return p(e,t),function(n){for(var r=[],o=0;o<e.length;o++){var s=e[o];(a=i[s.id]).refs--,r.push(a)}n&&p(f(n,t),t);for(o=0;o<r.length;o++){var a;if(0===(a=r[o]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete i[a.id]}}}};var y,x=(y=[],function(n,t){return y[n]=t,y.filter(Boolean).join("\n")});function w(n,t,e,r){var o=e?"":r.css;if(n.styleSheet)n.styleSheet.cssText=x(t,o);else{var i=document.createTextNode(o),s=n.childNodes;s[t]&&n.removeChild(s[t]),s.length?n.insertBefore(i,s[t]):n.appendChild(i)}}},function(n,t){n.exports=function(n){var t=[];return t.toString=function(){return this.map(function(t){var e=function(n,t){var e=n[1]||"",r=n[3];if(!r)return e;if(t&&"function"==typeof btoa){var o=(s=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),i=r.sources.map(function(n){return"/*# sourceURL="+r.sourceRoot+n+" */"});return[e].concat(i).concat([o]).join("\n")}var s;return[e].join("\n")}(t,n);return t[2]?"@media "+t[2]+"{"+e+"}":e}).join("")},t.i=function(n,e){"string"==typeof n&&(n=[[null,n,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<n.length;o++){var s=n[o];"number"==typeof s[0]&&r[s[0]]||(e&&!s[2]?s[2]=e:e&&(s[2]="("+s[2]+") and ("+e+")"),t.push(s))}},t}},function(n,t,e){"use strict";t.__esModule=!0;var r=function(){function n(n,t,e){void 0===n&&(n=0),void 0===t&&(t="empty"),void 0===e&&(e=!1),this.isPseudo=!1,this.id=n,this.label=t,this.isPseudo=e}return n.prototype.setEmpty=function(){return this.id=0,this.label="empty",this.isPseudo=!1,this},n.prototype.isEmpty=function(){return"empty"===this.label&&0===this.id},n}();t.default=r},function(n,t,e){"use strict";t.__esModule=!0,t.TETROMINO_I={label:"I",coords:[[[1,0],[1,1],[1,2],[1,3]],[[0,1],[1,1],[2,1],[3,1]]]},t.TETROMINO_J={label:"J",coords:[[[0,0],[0,1],[0,2],[1,2]],[[0,1],[1,1],[2,0],[2,1]],[[0,0],[1,0],[1,1],[1,2]],[[0,0],[0,1],[1,0],[2,0]]]},t.TETROMINO_L={label:"L",coords:[[[0,0],[0,1],[0,2],[1,0]],[[0,0],[0,1],[1,1],[2,1]],[[0,2],[1,0],[1,1],[1,2]],[[0,0],[1,0],[2,0],[2,1]]]},t.TETROMINO_O={label:"O",coords:[[[0,0],[0,1],[1,0],[1,1]]]},t.TETROMINO_S={label:"S",coords:[[[0,0],[1,0],[1,1],[2,1]],[[0,1],[0,2],[1,0],[1,1]]]},t.TETROMINO_T={label:"T",coords:[[[0,0],[0,1],[0,2],[1,1]],[[0,1],[1,0],[1,1],[2,1]],[[0,1],[1,0],[1,1],[1,2]],[[0,0],[1,0],[1,1],[2,0]]]},t.TETROMINO_Z={label:"Z",coords:[[[0,0],[0,1],[1,1],[1,2]],[[0,1],[1,0],[1,1],[2,0]]]}},function(n,t,e){"use strict";t.__esModule=!0,t.default=function(n){var t=n.slice(0),e=t.length;if(e<2)return t;for(;e;){for(var r=Math.floor(Math.random()*e--),o=t[r];r<e;)t[r]=t[++r];t[r]=o}return t}},function(n,t,e){"use strict";var r=Object.prototype.hasOwnProperty,o="~";function i(){}function s(n,t,e,r,i){if("function"!=typeof e)throw new TypeError("The listener must be a function");var s=new function(n,t,e){this.fn=n,this.context=t,this.once=e||!1}(e,r||n,i),a=o?o+t:t;return n._events[a]?n._events[a].fn?n._events[a]=[n._events[a],s]:n._events[a].push(s):(n._events[a]=s,n._eventsCount++),n}function a(n,t){0==--n._eventsCount?n._events=new i:delete n._events[t]}function c(){this._events=new i,this._eventsCount=0}Object.create&&(i.prototype=Object.create(null),(new i).__proto__||(o=!1)),c.prototype.eventNames=function(){var n,t,e=[];if(0===this._eventsCount)return e;for(t in n=this._events)r.call(n,t)&&e.push(o?t.slice(1):t);return Object.getOwnPropertySymbols?e.concat(Object.getOwnPropertySymbols(n)):e},c.prototype.listeners=function(n){var t=o?o+n:n,e=this._events[t];if(!e)return[];if(e.fn)return[e.fn];for(var r=0,i=e.length,s=new Array(i);r<i;r++)s[r]=e[r].fn;return s},c.prototype.listenerCount=function(n){var t=o?o+n:n,e=this._events[t];return e?e.fn?1:e.length:0},c.prototype.emit=function(n,t,e,r,i,s){var a=o?o+n:n;if(!this._events[a])return!1;var c,d,l=this._events[a],u=arguments.length;if(l.fn){switch(l.once&&this.removeListener(n,l.fn,void 0,!0),u){case 1:return l.fn.call(l.context),!0;case 2:return l.fn.call(l.context,t),!0;case 3:return l.fn.call(l.context,t,e),!0;case 4:return l.fn.call(l.context,t,e,r),!0;case 5:return l.fn.call(l.context,t,e,r,i),!0;case 6:return l.fn.call(l.context,t,e,r,i,s),!0}for(d=1,c=new Array(u-1);d<u;d++)c[d-1]=arguments[d];l.fn.apply(l.context,c)}else{var p,f=l.length;for(d=0;d<f;d++)switch(l[d].once&&this.removeListener(n,l[d].fn,void 0,!0),u){case 1:l[d].fn.call(l[d].context);break;case 2:l[d].fn.call(l[d].context,t);break;case 3:l[d].fn.call(l[d].context,t,e);break;case 4:l[d].fn.call(l[d].context,t,e,r);break;default:if(!c)for(p=1,c=new Array(u-1);p<u;p++)c[p-1]=arguments[p];l[d].fn.apply(l[d].context,c)}}return!0},c.prototype.on=function(n,t,e){return s(this,n,t,e,!1)},c.prototype.once=function(n,t,e){return s(this,n,t,e,!0)},c.prototype.removeListener=function(n,t,e,r){var i=o?o+n:n;if(!this._events[i])return this;if(!t)return a(this,i),this;var s=this._events[i];if(s.fn)s.fn!==t||r&&!s.once||e&&s.context!==e||a(this,i);else{for(var c=0,d=[],l=s.length;c<l;c++)(s[c].fn!==t||r&&!s[c].once||e&&s[c].context!==e)&&d.push(s[c]);d.length?this._events[i]=1===d.length?d[0]:d:a(this,i)}return this},c.prototype.removeAllListeners=function(n){var t;return n?(t=o?o+n:n,this._events[t]&&a(this,t)):(this._events=new i,this._eventsCount=0),this},c.prototype.off=c.prototype.removeListener,c.prototype.addListener=c.prototype.on,c.prefixed=o,c.EventEmitter=c,n.exports=c},function(n,t,e){"use strict";t.__esModule=!0;var r=e(5),o=e(4),i=e(3),s=e(2),a=function(){function n(n){this.moves=0,this.isStarted=!1,this.level=1,this.score=0,this.pieceCount=0,this.delay=1e3,this.tetrominoes=[i.TETROMINO_O,i.TETROMINO_J,i.TETROMINO_L,i.TETROMINO_S,i.TETROMINO_Z,i.TETROMINO_T,i.TETROMINO_I],this.option=n,this.eventEmitter=new r.EventEmitter}return n.prototype.draw=function(){},n.prototype.initMatrix=function(){var n=this.option,t=n.width,e=n.height;this.matrix=[];for(var r=0;r<e;r++){Array.isArray(this.matrix[r])||(this.matrix[r]=[]);for(var o=0;o<t;o++)this.matrix[r][o]=new s.default}},n.prototype.setNewPiece=function(){var n=o.default(this.tetrominoes)[0],t=o.default(n.coords)[0];this.pieceCount+=1,this.currentPiece={id:this.pieceCount,tetromino:n,coord:t,pos:{x:4,y:0},getPosArr:function(n,t){return void 0===n&&(n=this.pos),void 0===t&&(t=this.coord),t.map(function(t){var e=t[0],r=t[1];return{x:n.x+e,y:n.y+r}})},rotateIndex:0}},n.prototype.canPlaceBlocks=function(n){var t=this;return n.every(function(n){if(!(n.y in t.matrix))return!1;var e=t.matrix[n.y][n.x];return!(!e||!e.isEmpty())||!(!e||e.id!==t.currentPiece.id)})},n.prototype.eraseBlocks=function(n){this.matrix.map(function(t){return t.map(function(t){return t.id===n?t.setEmpty():t})})},n.prototype.canThrowNewBlock=function(){var n=this;return this.currentPiece.getPosArr().every(function(t){return n.matrix[t.y][t.x].isEmpty()})},n.prototype.getFixedPosArrData=function(n){for(var t=0,e=n.slice(0);;){t+=1;var r=n.map(function(n){return{x:n.x,y:n.y+t}});if(!this.canPlaceBlocks(r))break;e=r}return{deltaY:t,fixedPosArr:e}},n.prototype.setBlocks=function(n,t){var e=this;this.getFixedPosArrData(n).fixedPosArr.forEach(function(n){var r=n.x,o=n.y;e.matrix[o][r]=new s.default(t.id,t.tetromino.label,!0)}),n.forEach(function(n){var r=n.x,o=n.y;e.matrix[o][r]=new s.default(t.id,t.tetromino.label)})},n.prototype.clearRowIfNeeded=function(){var n=this.matrix,t=this.level,e=this.option,r=e.width,o=e.height,i=n.filter(function(n){return n.every(function(n){return!n.isEmpty()})}).length*r*t,s=n.filter(function(n){return n.some(function(n){return n.isEmpty()})}),a=o-s.length;this.matrix=n.map(function(n,t){return t<a?n.map(function(n){return n.setEmpty()}):s[t-a]}),this.score+=i,this.eventEmitter.emit("change")},n.prototype.changeLevelIfNeeded=function(){var n=Math.ceil(this.moves/20);if(this.level!=n){this.level=n;var t=1e3-50*n;this.delay=t<=400?400:t,this.eventEmitter.emit("change")}},n.prototype.throwNewPiece=function(){var n=this;this.timer=setInterval(function(){var t=n.currentPiece,e=t.getPosArr();if(n.eraseBlocks(t.id),n.canPlaceBlocks(e)){n.moves+=1,n.changeLevelIfNeeded(),n.setBlocks(e,t);var r=t.getPosArr({x:t.pos.x,y:t.pos.y+1});if(n.canPlaceBlocks(r))t.pos.y+=1;else{if(clearInterval(n.timer),n.setNewPiece(),n.canThrowNewBlock())return n.clearRowIfNeeded(),void n.throwNewPiece();n.gameOver()}}else clearInterval(n.timer),n.gameOver()},this.delay)},n.prototype.moveCurrentPieceToLeft=function(){var n=this.currentPiece,t=n.getPosArr({x:n.pos.x-1,y:n.pos.y});this.canPlaceBlocks(t)&&(this.eraseBlocks(n.id),n.pos.x-=1,this.setBlocks(t,n))},n.prototype.moveCurrentPieceToRight=function(){var n=this.currentPiece,t=n.getPosArr({x:n.pos.x+1,y:n.pos.y});this.canPlaceBlocks(t)&&(this.eraseBlocks(n.id),n.pos.x+=1,this.setBlocks(t,n))},n.prototype.moveCurrentPieceToBottom=function(){var n=this.currentPiece,t=n.getPosArr({x:n.pos.x,y:n.pos.y+1});this.canPlaceBlocks(t)&&(this.eraseBlocks(n.id),n.pos.y+=1,this.setBlocks(t,n))},n.prototype.dropCurrentPieceAllTheWayToBottom=function(){var n=this.currentPiece,t=this.getFixedPosArrData(n.getPosArr()),e=t.fixedPosArr;t.deltaY;this.eraseBlocks(n.id),this.setBlocks(e,n),this.clearRowIfNeeded(),this.setNewPiece()},n.prototype.rotateCurrentPiece=function(){var n=this.currentPiece,t=(n.rotateIndex+1)%n.tetromino.coords.length,e=n.tetromino.coords[t],r=n.getPosArr(n.pos,e);this.canPlaceBlocks(r)&&(this.eraseBlocks(n.id),n.rotateIndex=t,n.coord=n.tetromino.coords[t],this.setBlocks(r,n))},n.prototype.on=function(n,t){this.eventEmitter.on(n,t)},n.prototype.destroy=function(){this.eventEmitter.removeAllListeners()},n.prototype.start=function(){this.isStarted=!0,this.eventEmitter.emit("gamestart"),this.initMatrix(),this.setNewPiece(),this.throwNewPiece()},n.prototype.gameOver=function(){clearInterval(this.timer),this.isStarted=!1,this.eventEmitter.emit("gameover")},n}();t.default=a},function(n,t,e){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])},function(n,t){function e(){this.constructor=n}r(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)});t.__esModule=!0;var i=function(n){function t(t,e){var r=n.call(this,e)||this;return r.isAnimating=!1,r.lastHtml="",r.element=t,r.addEventListeners(),r.eventEmitter.on("gameover",function(){r.stopAnimationLoop()},!1),r}return o(t,n),t.prototype.draw=function(){var n=this.element,t=this.option,e=(t.width,t.height,this.matrix.map(function(n){return"<tr>"+n.map(function(n){var t=["color-"+n.label];return n.isPseudo&&t.push("pseudo"),'<td class="'+t.join(" ")+'"></td>'}).join("")+"</tr>"}).join(""));this.lastHtml!==e&&(n.innerHTML=e,this.lastHtml=e)},t.prototype.addEventListeners=function(){this.bindedHandleKeyDown=this.handleKeyDown.bind(this),document.addEventListener("keydown",this.bindedHandleKeyDown,!1)},t.prototype.handleKeyDown=function(n){if(this.isStarted){var t=n.code;"ArrowLeft"===t?this.moveCurrentPieceToLeft():"ArrowRight"===t?this.moveCurrentPieceToRight():"ArrowDown"===t?this.moveCurrentPieceToBottom():"ArrowUp"===t?this.rotateCurrentPiece():"Space"===t&&this.dropCurrentPieceAllTheWayToBottom()}},t.prototype.removeEventListeners=function(){document.removeEventListener("keydown",this.bindedHandleKeyDown,!1)},t.prototype.startAnimationLoop=function(){var n=this;n.isAnimating=!0,function t(){n.isAnimating&&(n.draw(),requestAnimationFrame(t))}()},t.prototype.stopAnimationLoop=function(){this.isAnimating=!1},t.prototype.start=function(){n.prototype.start.call(this),this.startAnimationLoop()},t.prototype.destroy=function(){n.prototype.destroy.call(this),this.stopAnimationLoop(),this.removeEventListeners()},t}(e(6).default);t.default=i},function(n,t,e){(n.exports=e(1)(!1)).push([n.i,"* {\n  box-sizing: border-box;\n}\nbutton {\n  outline: 0;\n}\n.game-boy {\n  border-radius: 10px;\n  padding: 10px 0;\n  margin: auto;\n  width: 320px;\n  height: 580px;\n  background-color: #eee;\n}\n.topbar {\n  padding: 7px 14px 4px;\n  display: flex;\n  justify-content: space-between;\n  font-size: 14px;\n  margin: 0 auto;\n}\n\n.tetris-container {\n  margin: 0 auto;\n  position: relative;\n  width: 260px;\n  height: 440px;\n  background-color: #fff;\n  padding-bottom: 14px;\n}\n\n.tetris-container__page__pad-score {\n  margin: 0;\n  display: block;\n  background-color: #fff;\n  color: #000;\n  padding-bottom: 20px;\n}\n\n.tetris-container__page {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  text-align: center;\n  background-color: rgba(0, 0, 0, 0.6);\n}\n.tetris-container__page h1 {\n  display: block;\n  padding: 20px 0;\n  margin-bottom: 0;\n  margin-top: 120px;\n  background-color: #fff;\n  font-size: 40px;\n}\n\n.tetris-container__page__btn {\n  margin-top: 30px;\n  cursor: pointer;\n  font-weight: 900;\n  text-transform: uppercase;\n  font-size: 30px;\n  background-color: #fff;\n  color: #000;\n  padding: 7px 14px;\n  border: 4px solid #333;\n}\n\n.tetris-container__tetris-matrix {\n  background-color: #fff;\n  margin: 0 auto;\n}\n\n.tetris-container__tetris-matrix td.pseudo {\n  opacity: 0.3;\n}\n\n.tetris-container__tetris-matrix td {\n  border: 1px solid #ddd;\n  width: 18px;\n  height: 18px;\n}\n\n.tetris-container__tetris-matrix td.color-I {\n  background-color: #e74c3c;\n}\n\n.tetris-container__tetris-matrix td.color-J {\n  background-color: #e67e22;\n}\n\n.tetris-container__tetris-matrix td.color-L {\n  background-color: #f1c40f;\n}\n\n.tetris-container__tetris-matrix td.color-O {\n  background-color: #1abc9c;\n}\n\n.tetris-container__tetris-matrix td.color-S {\n  background-color: #2ecc71;\n}\n\n.tetris-container__tetris-matrix td.color-T {\n  background-color: #3498db;\n}\n\n.tetris-container__tetris-matrix td.color-T {\n  background-color: #9b59b6;\n}\n\n.tetris-container__tetris-matrix td.color-Z {\n  background-color: #34495e;\n}\n\n.hidden {\n  display: none;\n}\n\n.group-btn-arrows {\n  background-color: #ccc;\n  padding: 14px;\n  border-radius: 100%;\n  width: 120px;\n}\n.group-btn-arrows__row {\n  display: flex;\n  justify-content: center;\n}\n.group-btn-arrows__row__btn {\n  background-color: #3e3439;\n  display: block;\n  width: 26px;\n  height: 26px;\n}\n.group-btn-arrows__row__btn-up {\n  border-top: 2px solid #2b2528;\n  border-left: 2px solid #2b2528;\n  border-right: 2px solid #2b2528;\n  border-bottom: 2px solid #3e3439;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n}\n.group-btn-arrows__row__btn-left {\n  border-top: 2px solid #2b2528;\n  border-left: 2px solid #2b2528;\n  border-right: 2px solid #3e3439;\n  border-bottom: 2px solid #3e3439;\n  border-top-left-radius: 6px;\n  border-bottom-left-radius: 6px;\n}\n.group-btn-arrows__row__btn-down {\n  border-top: 2px solid #3e3439;\n  border-left: 2px solid #2b2528;\n  border-right: 2px solid #2b2528;\n  border-bottom: 2px solid #3e3439;\n  border-bottom-left-radius: 6px;\n  border-bottom-right-radius: 6px;\n}\n.group-btn-arrows__row__btn-empty {\n  border: 1px solid #3e3439;\n}\n.group-btn-arrows__row__btn-right {\n  border-top: 2px solid #2b2528;\n  border-left: 2px solid #3e3439;\n  border-right: 2px solid #2b2528;\n  border-bottom: 2px solid #2b2528;\n  border-top-right-radius: 6px;\n  border-bottom-right-radius: 6px;\n}\n.game-controller {\n  display: flex;\n  justify-content: space-between;\n  min-width: 300px;\n  padding: 12px 14px 10px;\n}\n.group-btn-functions {\n  display: flex;\n  justify-content: space-around;\n  background-color: #ccc;\n  height: 56px;\n  width: 120px;\n  padding: 6px 2px;\n  border-radius: 40px;\n  transform: rotate(-30deg);\n  margin-top: 30px;\n}\n.group-btn-functions__btn {\n  background-color: #793c59;\n  border: 3px solid #3e3439;\n  width: 44px;\n  height: 44px;\n  border-radius: 100%;\n}\n",""])},function(n,t,e){var r=e(8);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(0)(r,o);r.locals&&(n.exports=r.locals)},function(n,t){n.exports=function(n){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var e=t.protocol+"//"+t.host,r=e+t.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,t){var o,i=t.trim().replace(/^"(.*)"$/,function(n,t){return t}).replace(/^'(.*)'$/,function(n,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?n:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?e+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(n,t,e){(n.exports=e(1)(!1)).push([n.i,'/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n',""])},function(n,t,e){var r=e(11);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(0)(r,o);r.locals&&(n.exports=r.locals)},function(n,t,e){"use strict";t.__esModule=!0,e(12),e(9);var r=e(7),o=document.getElementById("matrix"),i=new r.default(o,{width:10,height:20}),s=document.getElementById("page-home"),a=document.getElementById("page-game-over"),c=document.getElementById("btn-start"),d=document.getElementById("btn-play-again"),l=document.getElementById("topbar"),u=document.getElementById("topbar-level"),p=document.getElementById("topbar-score"),f=document.getElementById("pad-score"),h=document.getElementById("btn-arrow-up"),m=document.getElementById("btn-arrow-down"),b=document.getElementById("btn-arrow-left"),v=document.getElementById("btn-arrow-right"),g=document.getElementById("btn-a"),y=document.getElementById("btn-b");i.on("gamestart",function(){u.textContent="Level: "+i.level,p.textContent="Score: "+i.score}),i.on("change",function(){u.textContent="Level: "+i.level,p.textContent="Score: "+i.score}),i.on("gameover",function(){a.classList.remove("hidden"),f.innerHTML="Your Score: "+i.score});var x=function(n){n.preventDefault(),i.start(),l.classList.remove("hidden"),s.classList.add("hidden"),a.classList.add("hidden")};c.addEventListener("click",x,!1),d.addEventListener("click",x,!1),h.addEventListener("click",function(){return i.isStarted&&i.rotateCurrentPiece()},!1),m.addEventListener("click",function(){return i.isStarted&&i.moveCurrentPieceToBottom()},!1),b.addEventListener("click",function(){return i.isStarted&&i.moveCurrentPieceToLeft()},!1),v.addEventListener("click",function(){return i.isStarted&&i.moveCurrentPieceToRight()},!1),g.addEventListener("click",function(n){n.preventDefault(),i.isStarted?i.rotateCurrentPiece():x(n)},!1),y.addEventListener("click",function(n){n.preventDefault(),i.isStarted?i.dropCurrentPieceAllTheWayToBottom():x(n)},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,