!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:o})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/dist/",n(n.s=6)}([function(t,e,n){"use strict";e.__esModule=!0;var o=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e="empty"),this.id=t,this.label=e}return t.prototype.setEmpty=function(){return this.id=0,this.label="empty",this},t.prototype.isEmpty=function(){return"empty"===this.label&&0===this.id},t}();e.default=o},function(t,e,n){"use strict";e.__esModule=!0,e.TETROMINO_I={label:"I",coords:[[[1,0],[1,1],[1,2],[1,3]],[[0,1],[1,1],[2,1],[3,1]]]},e.TETROMINO_J={label:"J",coords:[[[0,0],[0,1],[0,2],[1,2]],[[0,1],[1,1],[2,0],[2,1]],[[0,0],[1,0],[1,1],[1,2]],[[0,0],[0,1],[1,0],[2,0]]]},e.TETROMINO_L={label:"L",coords:[[[0,0],[0,1],[0,2],[1,0]],[[0,0],[0,1],[1,1],[2,1]],[[0,2],[1,0],[1,1],[1,2]],[[0,0],[1,0],[2,0],[2,1]]]},e.TETROMINO_O={label:"O",coords:[[[0,0],[0,1],[1,0],[1,1]]]},e.TETROMINO_S={label:"S",coords:[[[0,0],[1,0],[1,1],[2,1]],[[0,1],[0,2],[1,0],[1,1]]]},e.TETROMINO_T={label:"T",coords:[[[0,0],[0,1],[0,2],[1,1]],[[0,1],[1,0],[1,1],[2,1]],[[0,1],[1,0],[1,1],[1,2]],[[0,0],[1,0],[1,1],[2,0]]]},e.TETROMINO_Z={label:"Z",coords:[[[0,0],[0,1],[1,1],[1,2]],[[0,1],[1,0],[1,1],[2,0]]]}},function(t,e,n){"use strict";e.__esModule=!0,e.default=function(t){var e=t.slice(0),n=e.length;if(n<2)return e;for(;n;){for(var o=Math.floor(Math.random()*n--),r=e[o];o<n;)e[o]=e[++o];e[o]=r}return e}},function(t,e,n){"use strict";var o=Object.prototype.hasOwnProperty,r="~";function i(){}function s(t,e,n,o,i){if("function"!=typeof n)throw new TypeError("The listener must be a function");var s=new function(t,e,n){this.fn=t,this.context=e,this.once=n||!1}(n,o||t,i),c=r?r+e:e;return t._events[c]?t._events[c].fn?t._events[c]=[t._events[c],s]:t._events[c].push(s):(t._events[c]=s,t._eventsCount++),t}function c(t,e){0==--t._eventsCount?t._events=new i:delete t._events[e]}function a(){this._events=new i,this._eventsCount=0}Object.create&&(i.prototype=Object.create(null),(new i).__proto__||(r=!1)),a.prototype.eventNames=function(){var t,e,n=[];if(0===this._eventsCount)return n;for(e in t=this._events)o.call(t,e)&&n.push(r?e.slice(1):e);return Object.getOwnPropertySymbols?n.concat(Object.getOwnPropertySymbols(t)):n},a.prototype.listeners=function(t){var e=r?r+t:t,n=this._events[e];if(!n)return[];if(n.fn)return[n.fn];for(var o=0,i=n.length,s=new Array(i);o<i;o++)s[o]=n[o].fn;return s},a.prototype.listenerCount=function(t){var e=r?r+t:t,n=this._events[e];return n?n.fn?1:n.length:0},a.prototype.emit=function(t,e,n,o,i,s){var c=r?r+t:t;if(!this._events[c])return!1;var a,u,l=this._events[c],h=arguments.length;if(l.fn){switch(l.once&&this.removeListener(t,l.fn,void 0,!0),h){case 1:return l.fn.call(l.context),!0;case 2:return l.fn.call(l.context,e),!0;case 3:return l.fn.call(l.context,e,n),!0;case 4:return l.fn.call(l.context,e,n,o),!0;case 5:return l.fn.call(l.context,e,n,o,i),!0;case 6:return l.fn.call(l.context,e,n,o,i,s),!0}for(u=1,a=new Array(h-1);u<h;u++)a[u-1]=arguments[u];l.fn.apply(l.context,a)}else{var p,f=l.length;for(u=0;u<f;u++)switch(l[u].once&&this.removeListener(t,l[u].fn,void 0,!0),h){case 1:l[u].fn.call(l[u].context);break;case 2:l[u].fn.call(l[u].context,e);break;case 3:l[u].fn.call(l[u].context,e,n);break;case 4:l[u].fn.call(l[u].context,e,n,o);break;default:if(!a)for(p=1,a=new Array(h-1);p<h;p++)a[p-1]=arguments[p];l[u].fn.apply(l[u].context,a)}}return!0},a.prototype.on=function(t,e,n){return s(this,t,e,n,!1)},a.prototype.once=function(t,e,n){return s(this,t,e,n,!0)},a.prototype.removeListener=function(t,e,n,o){var i=r?r+t:t;if(!this._events[i])return this;if(!e)return c(this,i),this;var s=this._events[i];if(s.fn)s.fn!==e||o&&!s.once||n&&s.context!==n||c(this,i);else{for(var a=0,u=[],l=s.length;a<l;a++)(s[a].fn!==e||o&&!s[a].once||n&&s[a].context!==n)&&u.push(s[a]);u.length?this._events[i]=1===u.length?u[0]:u:c(this,i)}return this},a.prototype.removeAllListeners=function(t){var e;return t?(e=r?r+t:t,this._events[e]&&c(this,e)):(this._events=new i,this._eventsCount=0),this},a.prototype.off=a.prototype.removeListener,a.prototype.addListener=a.prototype.on,a.prefixed=r,a.EventEmitter=a,t.exports=a},function(t,e,n){"use strict";e.__esModule=!0;var o=n(3),r=n(2),i=n(1),s=n(0),c=function(){function t(t){this.moves=0,this.isStarted=!1,this.level=1,this.score=0,this.pieceCount=0,this.delay=1e3,this.tetrominoes=[i.TETROMINO_O,i.TETROMINO_J,i.TETROMINO_L,i.TETROMINO_S,i.TETROMINO_Z,i.TETROMINO_T,i.TETROMINO_I],this.option=t,this.eventEmitter=new o.EventEmitter}return t.prototype.draw=function(){},t.prototype.initMatrix=function(){var t=this.option,e=t.width,n=t.height;this.matrix=[];for(var o=0;o<n;o++){Array.isArray(this.matrix[o])||(this.matrix[o]=[]);for(var r=0;r<e;r++)this.matrix[o][r]=new s.default}},t.prototype.setNewBlock=function(){var t=r.default(this.tetrominoes)[0],e=r.default(t.coords)[0];this.pieceCount+=1,this.currentPiece={id:this.pieceCount,tetromino:t,coord:e,pos:{x:4,y:0},getPosArr:function(t,e){return void 0===t&&(t=this.pos),void 0===e&&(e=this.coord),e.map(function(e){var n=e[0],o=e[1];return{x:t.x+n,y:t.y+o}})},rotateIndex:0}},t.prototype.canPlaceBlocks=function(t){var e=this;return t.every(function(t){if(!(t.y in e.matrix))return!1;var n=e.matrix[t.y][t.x];return!(!n||!n.isEmpty())||!(!n||n.id!==e.currentPiece.id)})},t.prototype.eraseBlocks=function(t){this.matrix.map(function(e){return e.map(function(e){return e.id===t?e.setEmpty():e})})},t.prototype.canThrowNewBlock=function(){var t=this;return this.currentPiece.getPosArr().every(function(e){return t.matrix[e.y][e.x].isEmpty()})},t.prototype.setBlocks=function(t,e){var n=this;t.forEach(function(t){var o=t.x,r=t.y;n.matrix[r][o]=new s.default(e.id,e.tetromino.label)})},t.prototype.clearRowIfNeeded=function(){var t=this.matrix,e=this.level,n=this.option,o=n.width,r=n.height,i=t.filter(function(t){return t.every(function(t){return!t.isEmpty()})}).length*o*e,s=t.filter(function(t){return t.some(function(t){return t.isEmpty()})}),c=r-s.length;this.matrix=t.map(function(t,e){return e<c?t.map(function(t){return t.setEmpty()}):s[e-c]}),this.score+=i,this.eventEmitter.emit("change")},t.prototype.changeLevelIfNeeded=function(){var t=Math.ceil(this.moves/20);if(this.level!=t){this.level=t;var e=1e3-50*t;this.delay=e<=400?400:e,this.eventEmitter.emit("change")}},t.prototype.throwNewBlock=function(){var t=this;this.timer=setInterval(function(){var e=t.currentPiece,n=e.getPosArr();if(t.eraseBlocks(e.id),t.canPlaceBlocks(n)){t.moves+=1,t.changeLevelIfNeeded(),t.setBlocks(n,e);var o=e.getPosArr({x:e.pos.x,y:e.pos.y+1});if(t.canPlaceBlocks(o))e.pos.y+=1;else{if(clearInterval(t.timer),t.setNewBlock(),t.canThrowNewBlock())return t.clearRowIfNeeded(),void t.throwNewBlock();t.gameOver()}}else clearInterval(t.timer)},this.delay)},t.prototype.moveCurrentPieceToLeft=function(){var t=this.currentPiece,e=t.getPosArr({x:t.pos.x-1,y:t.pos.y});this.canPlaceBlocks(e)&&(this.eraseBlocks(t.id),t.pos.x-=1,this.setBlocks(e,t))},t.prototype.moveCurrentPieceToRight=function(){var t=this.currentPiece,e=t.getPosArr({x:t.pos.x+1,y:t.pos.y});this.canPlaceBlocks(e)&&(this.eraseBlocks(t.id),t.pos.x+=1,this.setBlocks(e,t))},t.prototype.moveCurrentPieceToBottom=function(){var t=this.currentPiece,e=t.getPosArr({x:t.pos.x,y:t.pos.y+1});this.canPlaceBlocks(e)&&(this.eraseBlocks(t.id),t.pos.y+=1,this.setBlocks(e,t))},t.prototype.rotateCurrentPiece=function(){var t=this.currentPiece,e=(t.rotateIndex+1)%t.tetromino.coords.length,n=t.tetromino.coords[e],o=t.getPosArr(t.pos,n);this.canPlaceBlocks(o)&&(this.eraseBlocks(t.id),t.rotateIndex=e,t.coord=t.tetromino.coords[e],this.setBlocks(o,t))},t.prototype.on=function(t,e){this.eventEmitter.on(t,e)},t.prototype.destroy=function(){this.eventEmitter.removeAllListeners()},t.prototype.start=function(){this.isStarted=!0,this.eventEmitter.emit("gamestart"),this.initMatrix(),this.setNewBlock(),this.throwNewBlock()},t.prototype.gameOver=function(){clearInterval(this.timer),this.isStarted=!1,this.eventEmitter.emit("gameover")},t}();e.default=c},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});e.__esModule=!0;var i=function(t){function e(e,n){var o=t.call(this,n)||this;return o.isAnimating=!1,o.lastHtml="",o.element=e,o.addEventListeners(),o}return r(e,t),e.prototype.draw=function(){var t=this.element,e=this.option,n=(e.width,e.height,this.matrix.map(function(t){return"<tr>"+t.map(function(t){return'<td class="color-'+t.label+'"></td>'}).join("")+"</tr>"}).join(""));this.lastHtml!==n&&(t.innerHTML=n,this.lastHtml=n)},e.prototype.addEventListeners=function(){this.bindedHandleKeyDown=this.handleKeyDown.bind(this),document.addEventListener("keydown",this.bindedHandleKeyDown,!1)},e.prototype.handleKeyDown=function(t){if(this.isStarted){var e=t.code;"ArrowLeft"===e?this.moveCurrentPieceToLeft():"ArrowRight"===e?this.moveCurrentPieceToRight():"ArrowDown"===e?this.moveCurrentPieceToBottom():["ArrowUp","Space"].includes(e)&&this.rotateCurrentPiece()}},e.prototype.removeEventListeners=function(){document.removeEventListener("keydown",this.bindedHandleKeyDown,!1)},e.prototype.startAnimationLoop=function(){var t=this;t.isAnimating=!0,function e(){t.isAnimating&&(t.draw(),requestAnimationFrame(e))}()},e.prototype.stopAnimationLoop=function(){this.isAnimating=!1},e.prototype.start=function(){t.prototype.start.call(this),this.startAnimationLoop()},e.prototype.destroy=function(){t.prototype.destroy.call(this),this.stopAnimationLoop(),this.removeEventListeners()},e}(n(4).default);e.default=i},function(t,e,n){"use strict";e.__esModule=!0;var o=n(5),r=document.getElementById("matrix"),i=new o.default(r,{width:10,height:20}),s=document.getElementById("page-home"),c=document.getElementById("page-game-over"),a=document.getElementById("btn-start"),u=document.getElementById("btn-play-again"),l=document.getElementById("topbar"),h=document.getElementById("topbar-level"),p=document.getElementById("topbar-score"),f=document.getElementById("pad-score");i.on("gamestart",function(){h.textContent="Level: "+i.level,p.textContent="Score: "+i.score}),i.on("change",function(){h.textContent="Level: "+i.level,p.textContent="Score: "+i.score}),i.on("gameover",function(){c.classList.remove("hidden"),f.innerHTML="Your Score: "+i.score});var d=function(){i.start(),l.classList.remove("hidden"),s.classList.add("hidden"),c.classList.add("hidden")};a.addEventListener("click",d,!1),u.addEventListener("click",d,!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,