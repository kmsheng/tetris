!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="/dist/",e(e.s=13)}([function(t,n,e){var r,o,i={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),a=function(t){var n={};return function(t){if("function"==typeof t)return t();if(void 0===n[t]){var e=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}}(),c=null,d=0,l=[],u=e(10);function p(t,n){for(var e=0;e<t.length;e++){var r=t[e],o=i[r.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](r.parts[s]);for(;s<r.parts.length;s++)o.parts.push(g(r.parts[s],n))}else{var a=[];for(s=0;s<r.parts.length;s++)a.push(g(r.parts[s],n));i[r.id]={id:r.id,refs:1,parts:a}}}}function f(t,n){for(var e=[],r={},o=0;o<t.length;o++){var i=t[o],s=n.base?i[0]+n.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};r[s]?r[s].parts.push(a):e.push(r[s]={id:s,parts:[a]})}return e}function h(t,n){var e=a(t.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===t.insertAt)r?r.nextSibling?e.insertBefore(n,r.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),l.push(n);else if("bottom"===t.insertAt)e.appendChild(n);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(t.insertInto+" "+t.insertAt.before);e.insertBefore(n,o)}}function m(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=l.indexOf(t);n>=0&&l.splice(n,1)}function b(t){var n=document.createElement("style");return t.attrs.type="text/css",v(n,t.attrs),h(t,n),n}function v(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})}function g(t,n){var e,r,o,i;if(n.transform&&t.css){if(!(i=n.transform(t.css)))return function(){};t.css=i}if(n.singleton){var s=d++;e=c||(c=b(n)),r=w.bind(null,e,s,!1),o=w.bind(null,e,s,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(t){var n=document.createElement("link");return t.attrs.type="text/css",t.attrs.rel="stylesheet",v(n,t.attrs),h(t,n),n}(n),r=function(t,n,e){var r=e.css,o=e.sourceMap,i=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||i)&&(r=u(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([r],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,e,n),o=function(){m(e),e.href&&URL.revokeObjectURL(e.href)}):(e=b(n),r=function(t,n){var e=n.css,r=n.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}.bind(null,e),o=function(){m(e)});return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else o()}}t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=s()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var e=f(t,n);return p(e,n),function(t){for(var r=[],o=0;o<e.length;o++){var s=e[o];(a=i[s.id]).refs--,r.push(a)}t&&p(f(t,n),n);for(o=0;o<r.length;o++){var a;if(0===(a=r[o]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete i[a.id]}}}};var y,x=(y=[],function(t,n){return y[t]=n,y.filter(Boolean).join("\n")});function w(t,n,e,r){var o=e?"":r.css;if(t.styleSheet)t.styleSheet.cssText=x(n,o);else{var i=document.createTextNode(o),s=t.childNodes;s[n]&&t.removeChild(s[n]),s.length?t.insertBefore(i,s[n]):t.appendChild(i)}}},function(t,n){t.exports=function(t){var n=[];return n.toString=function(){return this.map(function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var o=(s=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[e].concat(i).concat([o]).join("\n")}var s;return[e].join("\n")}(n,t);return n[2]?"@media "+n[2]+"{"+e+"}":e}).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var s=t[o];"number"==typeof s[0]&&r[s[0]]||(e&&!s[2]?s[2]=e:e&&(s[2]="("+s[2]+") and ("+e+")"),n.push(s))}},n}},function(t,n,e){"use strict";n.__esModule=!0;var r=function(){function t(t,n,e){void 0===t&&(t=0),void 0===n&&(n="empty"),void 0===e&&(e=!1),this.isPseudo=!1,this.isFadingOut=!1,this.id=t,this.label=n,this.isPseudo=e}return t.prototype.setEmpty=function(){return this.id=0,this.label="empty",this.isPseudo=!1,this.isFadingOut=!1,this},t.prototype.isEmpty=function(){return"empty"===this.label&&0===this.id},t.prototype.setFadingOut=function(){return this.isFadingOut=!0,this},t}();n.default=r},function(t,n,e){"use strict";n.__esModule=!0,n.TETROMINO_I={label:"I",coords:[[[1,0],[1,1],[1,2],[1,3]],[[0,1],[1,1],[2,1],[3,1]]]},n.TETROMINO_J={label:"J",coords:[[[0,0],[0,1],[0,2],[1,2]],[[0,1],[1,1],[2,0],[2,1]],[[0,0],[1,0],[1,1],[1,2]],[[0,0],[0,1],[1,0],[2,0]]]},n.TETROMINO_L={label:"L",coords:[[[0,0],[0,1],[0,2],[1,0]],[[0,0],[0,1],[1,1],[2,1]],[[0,2],[1,0],[1,1],[1,2]],[[0,0],[1,0],[2,0],[2,1]]]},n.TETROMINO_O={label:"O",coords:[[[0,0],[0,1],[1,0],[1,1]]]},n.TETROMINO_S={label:"S",coords:[[[0,0],[1,0],[1,1],[2,1]],[[0,1],[0,2],[1,0],[1,1]]]},n.TETROMINO_T={label:"T",coords:[[[0,0],[0,1],[0,2],[1,1]],[[0,1],[1,0],[1,1],[2,1]],[[0,1],[1,0],[1,1],[1,2]],[[0,0],[1,0],[1,1],[2,0]]]},n.TETROMINO_Z={label:"Z",coords:[[[0,0],[0,1],[1,1],[1,2]],[[0,1],[1,0],[1,1],[2,0]]]}},function(t,n,e){"use strict";n.__esModule=!0,n.default=function(t){var n=t.slice(0),e=n.length;if(e<2)return n;for(;e;){for(var r=Math.floor(Math.random()*e--),o=n[r];r<e;)n[r]=n[++r];n[r]=o}return n}},function(t,n,e){"use strict";var r=Object.prototype.hasOwnProperty,o="~";function i(){}function s(t,n,e,r,i){if("function"!=typeof e)throw new TypeError("The listener must be a function");var s=new function(t,n,e){this.fn=t,this.context=n,this.once=e||!1}(e,r||t,i),a=o?o+n:n;return t._events[a]?t._events[a].fn?t._events[a]=[t._events[a],s]:t._events[a].push(s):(t._events[a]=s,t._eventsCount++),t}function a(t,n){0==--t._eventsCount?t._events=new i:delete t._events[n]}function c(){this._events=new i,this._eventsCount=0}Object.create&&(i.prototype=Object.create(null),(new i).__proto__||(o=!1)),c.prototype.eventNames=function(){var t,n,e=[];if(0===this._eventsCount)return e;for(n in t=this._events)r.call(t,n)&&e.push(o?n.slice(1):n);return Object.getOwnPropertySymbols?e.concat(Object.getOwnPropertySymbols(t)):e},c.prototype.listeners=function(t){var n=o?o+t:t,e=this._events[n];if(!e)return[];if(e.fn)return[e.fn];for(var r=0,i=e.length,s=new Array(i);r<i;r++)s[r]=e[r].fn;return s},c.prototype.listenerCount=function(t){var n=o?o+t:t,e=this._events[n];return e?e.fn?1:e.length:0},c.prototype.emit=function(t,n,e,r,i,s){var a=o?o+t:t;if(!this._events[a])return!1;var c,d,l=this._events[a],u=arguments.length;if(l.fn){switch(l.once&&this.removeListener(t,l.fn,void 0,!0),u){case 1:return l.fn.call(l.context),!0;case 2:return l.fn.call(l.context,n),!0;case 3:return l.fn.call(l.context,n,e),!0;case 4:return l.fn.call(l.context,n,e,r),!0;case 5:return l.fn.call(l.context,n,e,r,i),!0;case 6:return l.fn.call(l.context,n,e,r,i,s),!0}for(d=1,c=new Array(u-1);d<u;d++)c[d-1]=arguments[d];l.fn.apply(l.context,c)}else{var p,f=l.length;for(d=0;d<f;d++)switch(l[d].once&&this.removeListener(t,l[d].fn,void 0,!0),u){case 1:l[d].fn.call(l[d].context);break;case 2:l[d].fn.call(l[d].context,n);break;case 3:l[d].fn.call(l[d].context,n,e);break;case 4:l[d].fn.call(l[d].context,n,e,r);break;default:if(!c)for(p=1,c=new Array(u-1);p<u;p++)c[p-1]=arguments[p];l[d].fn.apply(l[d].context,c)}}return!0},c.prototype.on=function(t,n,e){return s(this,t,n,e,!1)},c.prototype.once=function(t,n,e){return s(this,t,n,e,!0)},c.prototype.removeListener=function(t,n,e,r){var i=o?o+t:t;if(!this._events[i])return this;if(!n)return a(this,i),this;var s=this._events[i];if(s.fn)s.fn!==n||r&&!s.once||e&&s.context!==e||a(this,i);else{for(var c=0,d=[],l=s.length;c<l;c++)(s[c].fn!==n||r&&!s[c].once||e&&s[c].context!==e)&&d.push(s[c]);d.length?this._events[i]=1===d.length?d[0]:d:a(this,i)}return this},c.prototype.removeAllListeners=function(t){var n;return t?(n=o?o+t:t,this._events[n]&&a(this,n)):(this._events=new i,this._eventsCount=0),this},c.prototype.off=c.prototype.removeListener,c.prototype.addListener=c.prototype.on,c.prefixed=o,c.EventEmitter=c,t.exports=c},function(t,n,e){"use strict";n.__esModule=!0;var r=e(5),o=e(4),i=e(3),s=e(2),a=function(){function t(t){this.moves=0,this.isStarted=!1,this.level=1,this.score=0,this.pieceCount=0,this.delay=1e3,this.bufferHeight=1,this.tetrominoes=[i.TETROMINO_O,i.TETROMINO_J,i.TETROMINO_L,i.TETROMINO_S,i.TETROMINO_Z,i.TETROMINO_T,i.TETROMINO_I],this.option=t,this.eventEmitter=new r.EventEmitter}return t.prototype.draw=function(){},t.prototype.getMatrixHeight=function(){return this.option.height+this.bufferHeight},t.prototype.initMatrix=function(){var t=this.option.width,n=this.getMatrixHeight();this.matrix=[];for(var e=0;e<n;e++){Array.isArray(this.matrix[e])||(this.matrix[e]=[]);for(var r=0;r<t;r++)this.matrix[e][r]=new s.default}},t.prototype.getNewPiece=function(){var t=o.default(this.tetrominoes)[0],n=o.default(t.coords)[0];return this.pieceCount+=1,{id:this.pieceCount,tetromino:t,coord:n,pos:{x:4,y:0},getPosArr:function(t,n){return void 0===t&&(t=this.pos),void 0===n&&(n=this.coord),n.map(function(n){var e=n[0],r=n[1];return{x:t.x+e,y:t.y+r}})},rotateIndex:0}},t.prototype.setNewPiece=function(){this.nextPiece?(this.currentPiece=this.nextPiece,this.nextPiece=this.getNewPiece()):(this.currentPiece=this.getNewPiece(),this.nextPiece=this.getNewPiece())},t.prototype.canPlaceBlocks=function(t){var n=this;return t.every(function(t){if(!(t.y in n.matrix))return!1;var e=n.matrix[t.y][t.x];return!(!e||!e.isEmpty())||!(!e||e.id!==n.currentPiece.id)})},t.prototype.eraseBlocks=function(t){this.matrix.map(function(n){return n.map(function(n){return n.id===t?n.setEmpty():n})})},t.prototype.canThrowNewBlock=function(){var t=this;return this.currentPiece.getPosArr().every(function(n){return t.matrix[n.y][n.x].isEmpty()})},t.prototype.getDroppedPosData=function(t){for(var n=0,e=t.slice(0);;){n+=1;var r=t.map(function(t){return{x:t.x,y:t.y+n}});if(!this.canPlaceBlocks(r))break;e=r}return{deltaY:n,droppedPosArr:e}},t.prototype.setBlocks=function(t,n){var e=this;this.getDroppedPosData(t).droppedPosArr.forEach(function(t){var r=t.x,o=t.y;e.matrix[o][r]=new s.default(n.id,n.tetromino.label,!0)}),t.forEach(function(t){var r=t.x,o=t.y;e.matrix[o][r]=new s.default(n.id,n.tetromino.label)})},t.prototype.clearRowIfNeeded=function(t){var n=this.matrix,e=this.level,r=this.option.width,o=this.getMatrixHeight(),i=n.filter(function(t){return t.every(function(t){return!t.isEmpty()})}).length*r*e,s=n.filter(function(t){return t.some(function(t){return t.isEmpty()})}),a=o-s.length;this.matrix=n.map(function(t,n){return n<a?t.map(function(t){return t.setEmpty()}):s[n-a]}),this.score+=i,this.eventEmitter.emit("change"),t&&t()},t.prototype.changeLevelIfNeeded=function(){var t=Math.ceil(this.moves/20);if(this.level!=t){this.level=t;var n=1e3-50*t;this.delay=n<=400?400:n,this.eventEmitter.emit("change")}},t.prototype.throwNewPiece=function(){var t=this;this.timer=setInterval(function(){var n=t.currentPiece,e=n.getPosArr();if(t.eraseBlocks(n.id),t.canPlaceBlocks(e)){t.moves+=1,t.changeLevelIfNeeded(),t.setBlocks(e,n);var r=n.getPosArr({x:n.pos.x,y:n.pos.y+1});if(t.canPlaceBlocks(r))n.pos.y+=1;else{if(clearInterval(t.timer),t.setNewPiece(),t.canThrowNewBlock())return void t.clearRowIfNeeded(function(){return t.throwNewPiece()});t.gameOver()}}else t.gameOver()},this.delay)},t.prototype.moveLeft=function(){var t=this.currentPiece,n=t.getPosArr({x:t.pos.x-1,y:t.pos.y});this.canPlaceBlocks(n)&&(this.eraseBlocks(t.id),t.pos.x-=1,this.setBlocks(n,t))},t.prototype.moveRight=function(){var t=this.currentPiece,n=t.getPosArr({x:t.pos.x+1,y:t.pos.y});this.canPlaceBlocks(n)&&(this.eraseBlocks(t.id),t.pos.x+=1,this.setBlocks(n,t))},t.prototype.moveDown=function(){var t=this.currentPiece,n=t.getPosArr({x:t.pos.x,y:t.pos.y+1});this.canPlaceBlocks(n)&&(this.eraseBlocks(t.id),t.pos.y+=1,this.setBlocks(n,t))},t.prototype.dropCurrentPiece=function(){var t=this.currentPiece,n=this.getDroppedPosData(t.getPosArr()),e=n.droppedPosArr;n.deltaY;this.eraseBlocks(t.id),this.setBlocks(e,t),this.clearRowIfNeeded(),this.setNewPiece()},t.prototype.rotateCurrentPiece=function(){var t=this.currentPiece,n=(t.rotateIndex+1)%t.tetromino.coords.length,e=t.tetromino.coords[n],r=t.getPosArr(t.pos,e);this.canPlaceBlocks(r)&&(this.eraseBlocks(t.id),t.rotateIndex=n,t.coord=t.tetromino.coords[n],this.setBlocks(r,t))},t.prototype.on=function(t,n){this.eventEmitter.on(t,n)},t.prototype.destroy=function(){this.eventEmitter.removeAllListeners()},t.prototype.start=function(){this.level=1,this.score=0,this.isStarted=!0,this.eventEmitter.emit("gamestart"),this.initMatrix(),this.setNewPiece(),this.throwNewPiece()},t.prototype.gameOver=function(){clearInterval(this.timer),this.isStarted=!1,this.eventEmitter.emit("gameover")},t}();n.default=a},function(t,n,e){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});n.__esModule=!0;var i=function(t){function n(n,e,r){var o=t.call(this,r)||this;return o.isAnimating=!1,o.lastHtml="",o.lastNextPieceHtml="",o.element=n,o.nextPieceElement=e,o.addEventListeners(),o.eventEmitter.on("gameover",function(){o.stopAnimationLoop()},!1),o}return o(n,t),n.prototype.drawNextPiece=function(){var t=this.nextPiece,n=this.nextPieceElement,e=t.tetromino.label,r=t.getPosArr({x:0,y:0}),o=Array(4).fill(null).map(function(t,n){return"<tr>"+Array(4).fill(null).map(function(t,o){return'<td class="'+(r.find(function(t){return t.x===o&&t.y===n})?"color-"+e:"")+'"></td>'}).join("")+"</tr>"}).join("");this.lastNextPieceHtml!==o&&(n.innerHTML=o,this.lastNextPieceHtml=o)},n.prototype.draw=function(){var t=this;this.drawNextPiece();var n=this.element,e=this.matrix.map(function(n,e){return e<t.bufferHeight?"":"<tr>"+n.map(function(t){var n=["color-"+t.label];return t.isPseudo&&n.push("pseudo"),t.isFadingOut&&n.push("fade-out"),'<td class="'+n.join(" ")+'"></td>'}).join("")+"</tr>"}).join("");this.lastHtml!==e&&(n.innerHTML=e,this.lastHtml=e)},n.prototype.addEventListeners=function(){this.bindedHandleKeyDown=this.handleKeyDown.bind(this),document.addEventListener("keydown",this.bindedHandleKeyDown,!1)},n.prototype.handleKeyDown=function(t){if(this.isStarted){var n=t.code;"ArrowLeft"===n?this.moveLeft():"ArrowRight"===n?this.moveRight():"ArrowDown"===n?this.moveDown():"ArrowUp"===n?this.rotateCurrentPiece():"Space"===n&&this.dropCurrentPiece()}},n.prototype.removeEventListeners=function(){document.removeEventListener("keydown",this.bindedHandleKeyDown,!1)},n.prototype.startAnimationLoop=function(){var t=this;t.isAnimating=!0,function n(){t.isAnimating&&(t.draw(),requestAnimationFrame(n))}()},n.prototype.stopAnimationLoop=function(){this.isAnimating=!1},n.prototype.clearRowIfNeeded=function(n){var e=this;this.matrix.filter(function(t){return t.every(function(t){return!t.isEmpty()})}).length>0?(this.stopAnimationLoop(),this.matrix=this.matrix.map(function(t){return t.every(function(t){return!t.isEmpty()})?t.map(function(t){return t.setFadingOut()}):t}),this.draw(),setTimeout(function(){e.startAnimationLoop(),t.prototype.clearRowIfNeeded.call(e,n)},300)):t.prototype.clearRowIfNeeded.call(this,n)},n.prototype.start=function(){t.prototype.start.call(this),this.startAnimationLoop()},n.prototype.destroy=function(){t.prototype.destroy.call(this),this.stopAnimationLoop(),this.removeEventListeners()},n}(e(6).default);n.default=i},function(t,n,e){(t.exports=e(1)(!1)).push([t.i,"@keyframes fade-out {\n  from {opacity: 1}\n  to {opacity: 0}\n}\n\nbody {\n  overflow: hidden;\n}\n\n* {\n  box-sizing: border-box;\n}\nbutton {\n  outline: 0;\n}\n.game-boy {\n  border-radius: 10px;\n  padding: 10px 0;\n  margin: auto;\n  width: 320px;\n  height: 580px;\n  background-color: #eee;\n}\n.topbar {\n  padding: 7px 14px 4px;\n  display: flex;\n  justify-content: space-between;\n  font-size: 14px;\n  margin: 0 auto;\n}\n\n.tetris-container {\n  margin: 0 auto;\n  position: relative;\n  width: 260px;\n  height: 440px;\n  background-color: #fff;\n  padding-bottom: 14px;\n}\n\n.tetris-container__page__pad-score {\n  margin: 0;\n  display: block;\n  background-color: #fff;\n  color: #000;\n  padding-bottom: 20px;\n}\n\n.tetris-container__page {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  text-align: center;\n  background-color: rgba(0, 0, 0, 0.6);\n}\n.tetris-container__page h1 {\n  display: block;\n  padding: 20px 0;\n  margin-bottom: 0;\n  margin-top: 120px;\n  background-color: #fff;\n  font-size: 40px;\n}\n\n.tetris-container__page__btn {\n  margin-top: 30px;\n  cursor: pointer;\n  font-weight: 900;\n  text-transform: uppercase;\n  font-size: 30px;\n  background-color: #fff;\n  color: #000;\n  padding: 7px 14px;\n  border: 4px solid #333;\n}\n\n.tetris-container__tetris-matrix {\n  background-color: #fff;\n  margin: 0 auto;\n}\n.tetris-container__tetris-matrix td {\n  border: 1px solid #ddd;\n  width: 18px;\n  height: 18px;\n}\n.tetris-container__next-piece td {\n  width: 4px;\n  height: 4px;\n}\n.tetris-container__tetris-matrix td.pseudo {\n  opacity: 0.3;\n}\n\n.tetris-container__tetris-matrix td.fade-out {\n  animation-name: fade-out;\n  animation-duration: 0.3s;\n  animation-iteration-count: 1;\n  opacity: 0;\n}\n.tetris-container__next-piece td.color-I,\n.tetris-container__tetris-matrix td.color-I {\n  background-color: #e74c3c;\n}\n\n.tetris-container__next-piece td.color-J,\n.tetris-container__tetris-matrix td.color-J {\n  background-color: #e67e22;\n}\n\n.tetris-container__next-piece td.color-L,\n.tetris-container__tetris-matrix td.color-L {\n  background-color: #f1c40f;\n}\n\n.tetris-container__next-piece td.color-O,\n.tetris-container__tetris-matrix td.color-O {\n  background-color: #1abc9c;\n}\n\n.tetris-container__next-piece td.color-S,\n.tetris-container__tetris-matrix td.color-S {\n  background-color: #2ecc71;\n}\n\n.tetris-container__next-piece td.color-T,\n.tetris-container__tetris-matrix td.color-T {\n  background-color: #3498db;\n}\n\n.tetris-container__next-piece td.color-Z,\n.tetris-container__tetris-matrix td.color-Z {\n  background-color: #34495e;\n}\n\n.hidden {\n  display: none;\n}\n\n.group-btn-arrows {\n  background-color: #ccc;\n  padding: 14px;\n  border-radius: 100%;\n  width: 120px;\n}\n.group-btn-arrows__row {\n  display: flex;\n  justify-content: center;\n}\n.group-btn-arrows__row__btn {\n  background-color: #3e3439;\n  display: block;\n  width: 26px;\n  height: 26px;\n}\n.group-btn-arrows__row__btn-up {\n  border-top: 2px solid #2b2528;\n  border-left: 2px solid #2b2528;\n  border-right: 2px solid #2b2528;\n  border-bottom: 2px solid #3e3439;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n}\n.group-btn-arrows__row__btn-left {\n  border-top: 2px solid #2b2528;\n  border-left: 2px solid #2b2528;\n  border-right: 2px solid #3e3439;\n  border-bottom: 2px solid #3e3439;\n  border-top-left-radius: 6px;\n  border-bottom-left-radius: 6px;\n}\n.group-btn-arrows__row__btn-down {\n  border-top: 2px solid #3e3439;\n  border-left: 2px solid #2b2528;\n  border-right: 2px solid #2b2528;\n  border-bottom: 2px solid #3e3439;\n  border-bottom-left-radius: 6px;\n  border-bottom-right-radius: 6px;\n}\n.group-btn-arrows__row__btn-empty {\n  border: 1px solid #3e3439;\n}\n.group-btn-arrows__row__btn-right {\n  border-top: 2px solid #2b2528;\n  border-left: 2px solid #3e3439;\n  border-right: 2px solid #2b2528;\n  border-bottom: 2px solid #2b2528;\n  border-top-right-radius: 6px;\n  border-bottom-right-radius: 6px;\n}\n.game-controller {\n  display: flex;\n  justify-content: space-between;\n  min-width: 300px;\n  padding: 12px 14px 10px;\n}\n.group-btn-functions {\n  display: flex;\n  justify-content: space-around;\n  background-color: #ccc;\n  height: 56px;\n  width: 120px;\n  padding: 6px 2px;\n  border-radius: 40px;\n  transform: rotate(-30deg);\n  margin-top: 30px;\n}\n.group-btn-functions__btn {\n  background-color: #793c59;\n  border: 3px solid #3e3439;\n  width: 44px;\n  height: 44px;\n  border-radius: 100%;\n}\n",""])},function(t,n,e){var r=e(8);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(0)(r,o);r.locals&&(t.exports=r.locals)},function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var e=n.protocol+"//"+n.host,r=e+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,n){var o,i=n.trim().replace(/^"(.*)"$/,function(t,n){return n}).replace(/^'(.*)'$/,function(t,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?e+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(t,n,e){(t.exports=e(1)(!1)).push([t.i,'/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n',""])},function(t,n,e){var r=e(11);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(0)(r,o);r.locals&&(t.exports=r.locals)},function(t,n,e){"use strict";n.__esModule=!0,e(12),e(9);var r=e(7),o=document.getElementById("matrix"),i=document.getElementById("next-piece"),s=new r.default(o,i,{width:10,height:20}),a=document.getElementById("page-home"),c=document.getElementById("page-game-over"),d=document.getElementById("btn-start"),l=document.getElementById("btn-play-again"),u=document.getElementById("topbar"),p=document.getElementById("topbar-level"),f=document.getElementById("topbar-score"),h=document.getElementById("pad-score"),m=document.getElementById("btn-arrow-up"),b=document.getElementById("btn-arrow-down"),v=document.getElementById("btn-arrow-left"),g=document.getElementById("btn-arrow-right"),y=document.getElementById("btn-a"),x=document.getElementById("btn-b");s.on("gamestart",function(){p.textContent="Level: "+s.level,f.textContent="Score: "+s.score}),s.on("change",function(){p.textContent="Level: "+s.level,f.textContent="Score: "+s.score}),s.on("gameover",function(){c.classList.remove("hidden"),h.innerHTML="Your Score: "+s.score});var w=function(){s.start(),u.classList.remove("hidden"),a.classList.add("hidden"),c.classList.add("hidden")};d.addEventListener("click",w,!1),l.addEventListener("click",w,!1),m.addEventListener("click",function(){return s.isStarted&&s.rotateCurrentPiece()},!1),b.addEventListener("click",function(){return s.isStarted&&s.moveDown()},!1),v.addEventListener("click",function(){return s.isStarted&&s.moveLeft()},!1),g.addEventListener("click",function(){return s.isStarted&&s.moveRight()},!1),y.addEventListener("click",function(){s.isStarted?s.rotateCurrentPiece():w()},!1),x.addEventListener("click",function(){s.isStarted?s.dropCurrentPiece():w()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,