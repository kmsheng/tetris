!function(n){var t={};function e(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=n,e.c=t,e.d=function(n,t,r){e.o(n,t)||Object.defineProperty(n,t,{configurable:!1,enumerable:!0,get:r})},e.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="/dist/",e(e.s=13)}([function(n,t,e){var r,o,i={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),a=function(n){var t={};return function(n){if("function"==typeof n)return n();if(void 0===t[n]){var e=function(n){return document.querySelector(n)}.call(this,n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}}(),c=null,l=0,d=[],u=e(10);function p(n,t){for(var e=0;e<n.length;e++){var r=n[e],o=i[r.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](r.parts[s]);for(;s<r.parts.length;s++)o.parts.push(g(r.parts[s],t))}else{var a=[];for(s=0;s<r.parts.length;s++)a.push(g(r.parts[s],t));i[r.id]={id:r.id,refs:1,parts:a}}}}function f(n,t){for(var e=[],r={},o=0;o<n.length;o++){var i=n[o],s=t.base?i[0]+t.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};r[s]?r[s].parts.push(a):e.push(r[s]={id:s,parts:[a]})}return e}function h(n,t){var e=a(n.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=d[d.length-1];if("top"===n.insertAt)r?r.nextSibling?e.insertBefore(t,r.nextSibling):e.appendChild(t):e.insertBefore(t,e.firstChild),d.push(t);else if("bottom"===n.insertAt)e.appendChild(t);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(n.insertInto+" "+n.insertAt.before);e.insertBefore(t,o)}}function m(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var t=d.indexOf(n);t>=0&&d.splice(t,1)}function b(n){var t=document.createElement("style");return n.attrs.type="text/css",v(t,n.attrs),h(n,t),t}function v(n,t){Object.keys(t).forEach(function(e){n.setAttribute(e,t[e])})}function g(n,t){var e,r,o,i;if(t.transform&&n.css){if(!(i=t.transform(n.css)))return function(){};n.css=i}if(t.singleton){var s=l++;e=c||(c=b(t)),r=w.bind(null,e,s,!1),o=w.bind(null,e,s,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(n){var t=document.createElement("link");return n.attrs.type="text/css",n.attrs.rel="stylesheet",v(t,n.attrs),h(n,t),t}(t),r=function(n,t,e){var r=e.css,o=e.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=u(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([r],{type:"text/css"}),a=n.href;n.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,e,t),o=function(){m(e),e.href&&URL.revokeObjectURL(e.href)}):(e=b(t),r=function(n,t){var e=t.css,r=t.media;r&&n.setAttribute("media",r);if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}.bind(null,e),o=function(){m(e)});return r(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;r(n=t)}else o()}}n.exports=function(n,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=s()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var e=f(n,t);return p(e,t),function(n){for(var r=[],o=0;o<e.length;o++){var s=e[o];(a=i[s.id]).refs--,r.push(a)}n&&p(f(n,t),t);for(o=0;o<r.length;o++){var a;if(0===(a=r[o]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete i[a.id]}}}};var y,x=(y=[],function(n,t){return y[n]=t,y.filter(Boolean).join("\n")});function w(n,t,e,r){var o=e?"":r.css;if(n.styleSheet)n.styleSheet.cssText=x(t,o);else{var i=document.createTextNode(o),s=n.childNodes;s[t]&&n.removeChild(s[t]),s.length?n.insertBefore(i,s[t]):n.appendChild(i)}}},function(n,t){n.exports=function(n){var t=[];return t.toString=function(){return this.map(function(t){var e=function(n,t){var e=n[1]||"",r=n[3];if(!r)return e;if(t&&"function"==typeof btoa){var o=(s=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),i=r.sources.map(function(n){return"/*# sourceURL="+r.sourceRoot+n+" */"});return[e].concat(i).concat([o]).join("\n")}var s;return[e].join("\n")}(t,n);return t[2]?"@media "+t[2]+"{"+e+"}":e}).join("")},t.i=function(n,e){"string"==typeof n&&(n=[[null,n,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<n.length;o++){var s=n[o];"number"==typeof s[0]&&r[s[0]]||(e&&!s[2]?s[2]=e:e&&(s[2]="("+s[2]+") and ("+e+")"),t.push(s))}},t}},function(n,t,e){"use strict";t.__esModule=!0;var r=function(){function n(n,t,e){void 0===n&&(n=0),void 0===t&&(t="empty"),void 0===e&&(e=!1),this.isPseudo=!1,this.id=n,this.label=t,this.isPseudo=e}return n.prototype.setEmpty=function(){return this.id=0,this.label="empty",this.isPseudo=!1,this},n.prototype.isEmpty=function(){return"empty"===this.label&&0===this.id},n}();t.default=r},function(n,t,e){"use strict";t.__esModule=!0,t.TETROMINO_I={label:"I",coords:[[[1,0],[1,1],[1,2],[1,3]],[[0,1],[1,1],[2,1],[3,1]]]},t.TETROMINO_J={label:"J",coords:[[[0,0],[0,1],[0,2],[1,2]],[[0,1],[1,1],[2,0],[2,1]],[[0,0],[1,0],[1,1],[1,2]],[[0,0],[0,1],[1,0],[2,0]]]},t.TETROMINO_L={label:"L",coords:[[[0,0],[0,1],[0,2],[1,0]],[[0,0],[0,1],[1,1],[2,1]],[[0,2],[1,0],[1,1],[1,2]],[[0,0],[1,0],[2,0],[2,1]]]},t.TETROMINO_O={label:"O",coords:[[[0,0],[0,1],[1,0],[1,1]]]},t.TETROMINO_S={label:"S",coords:[[[0,0],[1,0],[1,1],[2,1]],[[0,1],[0,2],[1,0],[1,1]]]},t.TETROMINO_T={label:"T",coords:[[[0,0],[0,1],[0,2],[1,1]],[[0,1],[1,0],[1,1],[2,1]],[[0,1],[1,0],[1,1],[1,2]],[[0,0],[1,0],[1,1],[2,0]]]},t.TETROMINO_Z={label:"Z",coords:[[[0,0],[0,1],[1,1],[1,2]],[[0,1],[1,0],[1,1],[2,0]]]}},function(n,t,e){"use strict";t.__esModule=!0,t.default=function(n){var t=n.slice(0),e=t.length;if(e<2)return t;for(;e;){for(var r=Math.floor(Math.random()*e--),o=t[r];r<e;)t[r]=t[++r];t[r]=o}return t}},function(n,t,e){"use strict";var r=Object.prototype.hasOwnProperty,o="~";function i(){}function s(n,t,e,r,i){if("function"!=typeof e)throw new TypeError("The listener must be a function");var s=new function(n,t,e){this.fn=n,this.context=t,this.once=e||!1}(e,r||n,i),a=o?o+t:t;return n._events[a]?n._events[a].fn?n._events[a]=[n._events[a],s]:n._events[a].push(s):(n._events[a]=s,n._eventsCount++),n}function a(n,t){0==--n._eventsCount?n._events=new i:delete n._events[t]}function c(){this._events=new i,this._eventsCount=0}Object.create&&(i.prototype=Object.create(null),(new i).__proto__||(o=!1)),c.prototype.eventNames=function(){var n,t,e=[];if(0===this._eventsCount)return e;for(t in n=this._events)r.call(n,t)&&e.push(o?t.slice(1):t);return Object.getOwnPropertySymbols?e.concat(Object.getOwnPropertySymbols(n)):e},c.prototype.listeners=function(n){var t=o?o+n:n,e=this._events[t];if(!e)return[];if(e.fn)return[e.fn];for(var r=0,i=e.length,s=new Array(i);r<i;r++)s[r]=e[r].fn;return s},c.prototype.listenerCount=function(n){var t=o?o+n:n,e=this._events[t];return e?e.fn?1:e.length:0},c.prototype.emit=function(n,t,e,r,i,s){var a=o?o+n:n;if(!this._events[a])return!1;var c,l,d=this._events[a],u=arguments.length;if(d.fn){switch(d.once&&this.removeListener(n,d.fn,void 0,!0),u){case 1:return d.fn.call(d.context),!0;case 2:return d.fn.call(d.context,t),!0;case 3:return d.fn.call(d.context,t,e),!0;case 4:return d.fn.call(d.context,t,e,r),!0;case 5:return d.fn.call(d.context,t,e,r,i),!0;case 6:return d.fn.call(d.context,t,e,r,i,s),!0}for(l=1,c=new Array(u-1);l<u;l++)c[l-1]=arguments[l];d.fn.apply(d.context,c)}else{var p,f=d.length;for(l=0;l<f;l++)switch(d[l].once&&this.removeListener(n,d[l].fn,void 0,!0),u){case 1:d[l].fn.call(d[l].context);break;case 2:d[l].fn.call(d[l].context,t);break;case 3:d[l].fn.call(d[l].context,t,e);break;case 4:d[l].fn.call(d[l].context,t,e,r);break;default:if(!c)for(p=1,c=new Array(u-1);p<u;p++)c[p-1]=arguments[p];d[l].fn.apply(d[l].context,c)}}return!0},c.prototype.on=function(n,t,e){return s(this,n,t,e,!1)},c.prototype.once=function(n,t,e){return s(this,n,t,e,!0)},c.prototype.removeListener=function(n,t,e,r){var i=o?o+n:n;if(!this._events[i])return this;if(!t)return a(this,i),this;var s=this._events[i];if(s.fn)s.fn!==t||r&&!s.once||e&&s.context!==e||a(this,i);else{for(var c=0,l=[],d=s.length;c<d;c++)(s[c].fn!==t||r&&!s[c].once||e&&s[c].context!==e)&&l.push(s[c]);l.length?this._events[i]=1===l.length?l[0]:l:a(this,i)}return this},c.prototype.removeAllListeners=function(n){var t;return n?(t=o?o+n:n,this._events[t]&&a(this,t)):(this._events=new i,this._eventsCount=0),this},c.prototype.off=c.prototype.removeListener,c.prototype.addListener=c.prototype.on,c.prefixed=o,c.EventEmitter=c,n.exports=c},function(n,t,e){"use strict";t.__esModule=!0;var r=e(5),o=e(4),i=e(3),s=e(2),a=function(){function n(n){this.moves=0,this.isStarted=!1,this.level=1,this.score=0,this.pieceCount=0,this.delay=1e3,this.tetrominoes=[i.TETROMINO_O,i.TETROMINO_J,i.TETROMINO_L,i.TETROMINO_S,i.TETROMINO_Z,i.TETROMINO_T,i.TETROMINO_I],this.option=n,this.eventEmitter=new r.EventEmitter}return n.prototype.draw=function(){},n.prototype.initMatrix=function(){var n=this.option,t=n.width,e=n.height;this.matrix=[];for(var r=0;r<e;r++){Array.isArray(this.matrix[r])||(this.matrix[r]=[]);for(var o=0;o<t;o++)this.matrix[r][o]=new s.default}},n.prototype.setNewPiece=function(){var n=o.default(this.tetrominoes)[0],t=o.default(n.coords)[0];this.pieceCount+=1,this.currentPiece={id:this.pieceCount,tetromino:n,coord:t,pos:{x:4,y:0},getPosArr:function(n,t){return void 0===n&&(n=this.pos),void 0===t&&(t=this.coord),t.map(function(t){var e=t[0],r=t[1];return{x:n.x+e,y:n.y+r}})},rotateIndex:0}},n.prototype.canPlaceBlocks=function(n){var t=this;return n.every(function(n){if(!(n.y in t.matrix))return!1;var e=t.matrix[n.y][n.x];return!(!e||!e.isEmpty())||!(!e||e.id!==t.currentPiece.id)})},n.prototype.eraseBlocks=function(n){this.matrix.map(function(t){return t.map(function(t){return t.id===n?t.setEmpty():t})})},n.prototype.canThrowNewBlock=function(){var n=this;return this.currentPiece.getPosArr().every(function(t){return n.matrix[t.y][t.x].isEmpty()})},n.prototype.getFixedPosArrData=function(n){for(var t=0,e=n.slice(0);;){t+=1;var r=n.map(function(n){return{x:n.x,y:n.y+t}});if(!this.canPlaceBlocks(r))break;e=r}return{deltaY:t,fixedPosArr:e}},n.prototype.setBlocks=function(n,t){var e=this;this.getFixedPosArrData(n).fixedPosArr.forEach(function(n){var r=n.x,o=n.y;e.matrix[o][r]=new s.default(t.id,t.tetromino.label,!0)}),n.forEach(function(n){var r=n.x,o=n.y;e.matrix[o][r]=new s.default(t.id,t.tetromino.label)})},n.prototype.clearRowIfNeeded=function(){var n=this.matrix,t=this.level,e=this.option,r=e.width,o=e.height,i=n.filter(function(n){return n.every(function(n){return!n.isEmpty()})}).length*r*t,s=n.filter(function(n){return n.some(function(n){return n.isEmpty()})}),a=o-s.length;this.matrix=n.map(function(n,t){return t<a?n.map(function(n){return n.setEmpty()}):s[t-a]}),this.score+=i,this.eventEmitter.emit("change")},n.prototype.changeLevelIfNeeded=function(){var n=Math.ceil(this.moves/20);if(this.level!=n){this.level=n;var t=1e3-50*n;this.delay=t<=400?400:t,this.eventEmitter.emit("change")}},n.prototype.throwNewPiece=function(){var n=this;this.timer=setInterval(function(){var t=n.currentPiece,e=t.getPosArr();if(n.eraseBlocks(t.id),n.canPlaceBlocks(e)){n.moves+=1,n.changeLevelIfNeeded(),n.setBlocks(e,t);var r=t.getPosArr({x:t.pos.x,y:t.pos.y+1});if(n.canPlaceBlocks(r))t.pos.y+=1;else{if(clearInterval(n.timer),n.setNewPiece(),n.canThrowNewBlock())return n.clearRowIfNeeded(),void n.throwNewPiece();n.gameOver()}}else clearInterval(n.timer),n.gameOver()},this.delay)},n.prototype.moveCurrentPieceToLeft=function(){var n=this.currentPiece,t=n.getPosArr({x:n.pos.x-1,y:n.pos.y});this.canPlaceBlocks(t)&&(this.eraseBlocks(n.id),n.pos.x-=1,this.setBlocks(t,n))},n.prototype.moveCurrentPieceToRight=function(){var n=this.currentPiece,t=n.getPosArr({x:n.pos.x+1,y:n.pos.y});this.canPlaceBlocks(t)&&(this.eraseBlocks(n.id),n.pos.x+=1,this.setBlocks(t,n))},n.prototype.moveCurrentPieceToBottom=function(){var n=this.currentPiece,t=n.getPosArr({x:n.pos.x,y:n.pos.y+1});this.canPlaceBlocks(t)&&(this.eraseBlocks(n.id),n.pos.y+=1,this.setBlocks(t,n))},n.prototype.dropCurrentPieceAllTheWayToBottom=function(){var n=this.currentPiece,t=this.getFixedPosArrData(n.getPosArr()),e=t.fixedPosArr;t.deltaY;this.eraseBlocks(n.id),this.setBlocks(e,n),this.clearRowIfNeeded(),this.setNewPiece()},n.prototype.rotateCurrentPiece=function(){var n=this.currentPiece,t=(n.rotateIndex+1)%n.tetromino.coords.length,e=n.tetromino.coords[t],r=n.getPosArr(n.pos,e);this.canPlaceBlocks(r)&&(this.eraseBlocks(n.id),n.rotateIndex=t,n.coord=n.tetromino.coords[t],this.setBlocks(r,n))},n.prototype.on=function(n,t){this.eventEmitter.on(n,t)},n.prototype.destroy=function(){this.eventEmitter.removeAllListeners()},n.prototype.start=function(){this.level=1,this.score=0,this.isStarted=!0,this.eventEmitter.emit("gamestart"),this.initMatrix(),this.setNewPiece(),this.throwNewPiece()},n.prototype.gameOver=function(){clearInterval(this.timer),this.isStarted=!1,this.eventEmitter.emit("gameover")},n}();t.default=a},function(n,t,e){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])},function(n,t){function e(){this.constructor=n}r(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)});t.__esModule=!0;var i=function(n){function t(t,e){var r=n.call(this,e)||this;return r.isAnimating=!1,r.lastHtml="",r.element=t,r.addEventListeners(),r.eventEmitter.on("gameover",function(){r.stopAnimationLoop()},!1),r}return o(t,n),t.prototype.draw=function(){var n=this.element,t=this.option,e=(t.width,t.height,this.matrix.map(function(n){return"<tr>"+n.map(function(n){var t=["color-"+n.label];return n.isPseudo&&t.push("pseudo"),'<td class="'+t.join(" ")+'"></td>'}).join("")+"</tr>"}).join(""));this.lastHtml!==e&&(n.innerHTML=e,this.lastHtml=e)},t.prototype.addEventListeners=function(){this.bindedHandleKeyDown=this.handleKeyDown.bind(this),document.addEventListener("keydown",this.bindedHandleKeyDown,!1)},t.prototype.handleKeyDown=function(n){if(this.isStarted){var t=n.code;"ArrowLeft"===t?this.moveCurrentPieceToLeft():"ArrowRight"===t?this.moveCurrentPieceToRight():"ArrowDown"===t?this.moveCurrentPieceToBottom():"ArrowUp"===t?this.rotateCurrentPiece():"Space"===t&&this.dropCurrentPieceAllTheWayToBottom()}},t.prototype.removeEventListeners=function(){document.removeEventListener("keydown",this.bindedHandleKeyDown,!1)},t.prototype.startAnimationLoop=function(){var n=this;n.isAnimating=!0,function t(){n.isAnimating&&(n.draw(),requestAnimationFrame(t))}()},t.prototype.stopAnimationLoop=function(){this.isAnimating=!1},t.prototype.start=function(){n.prototype.start.call(this),this.startAnimationLoop()},t.prototype.destroy=function(){n.prototype.destroy.call(this),this.stopAnimationLoop(),this.removeEventListeners()},t}(e(6).default);t.default=i},function(n,t,e){(n.exports=e(1)(!1)).push([n.i,"* {\n  box-sizing: border-box;\n}\nbutton {\n  outline: 0;\n}\n.game-boy {\n  border-radius: 10px;\n  padding: 10px 0;\n  margin: auto;\n  width: 320px;\n  height: 580px;\n  background-color: #eee;\n}\n.topbar {\n  padding: 7px 14px 4px;\n  display: flex;\n  justify-content: space-between;\n  font-size: 14px;\n  margin: 0 auto;\n}\n\n.tetris-container {\n  margin: 0 auto;\n  position: relative;\n  width: 260px;\n  height: 440px;\n  background-color: #fff;\n  padding-bottom: 14px;\n}\n\n.tetris-container__page__pad-score {\n  margin: 0;\n  display: block;\n  background-color: #fff;\n  color: #000;\n  padding-bottom: 20px;\n}\n\n.tetris-container__page {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  text-align: center;\n  background-color: rgba(0, 0, 0, 0.6);\n}\n.tetris-container__page h1 {\n  display: block;\n  padding: 20px 0;\n  margin-bottom: 0;\n  margin-top: 120px;\n  background-color: #fff;\n  font-size: 40px;\n}\n\n.tetris-container__page__btn {\n  margin-top: 30px;\n  cursor: pointer;\n  font-weight: 900;\n  text-transform: uppercase;\n  font-size: 30px;\n  background-color: #fff;\n  color: #000;\n  padding: 7px 14px;\n  border: 4px solid #333;\n}\n\n.tetris-container__tetris-matrix {\n  background-color: #fff;\n  margin: 0 auto;\n}\n\n.tetris-container__tetris-matrix td.pseudo {\n  opacity: 0.3;\n}\n\n.tetris-container__tetris-matrix td {\n  border: 1px solid #ddd;\n  width: 18px;\n  height: 18px;\n}\n\n.tetris-container__tetris-matrix td.color-I {\n  background-color: #e74c3c;\n}\n\n.tetris-container__tetris-matrix td.color-J {\n  background-color: #e67e22;\n}\n\n.tetris-container__tetris-matrix td.color-L {\n  background-color: #f1c40f;\n}\n\n.tetris-container__tetris-matrix td.color-O {\n  background-color: #1abc9c;\n}\n\n.tetris-container__tetris-matrix td.color-S {\n  background-color: #2ecc71;\n}\n\n.tetris-container__tetris-matrix td.color-T {\n  background-color: #3498db;\n}\n\n.tetris-container__tetris-matrix td.color-T {\n  background-color: #9b59b6;\n}\n\n.tetris-container__tetris-matrix td.color-Z {\n  background-color: #34495e;\n}\n\n.hidden {\n  display: none;\n}\n\n.group-btn-arrows {\n  background-color: #ccc;\n  padding: 14px;\n  border-radius: 100%;\n  width: 120px;\n}\n.group-btn-arrows__row {\n  display: flex;\n  justify-content: center;\n}\n.group-btn-arrows__row__btn {\n  background-color: #3e3439;\n  display: block;\n  width: 26px;\n  height: 26px;\n}\n.group-btn-arrows__row__btn-up {\n  border-top: 2px solid #2b2528;\n  border-left: 2px solid #2b2528;\n  border-right: 2px solid #2b2528;\n  border-bottom: 2px solid #3e3439;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n}\n.group-btn-arrows__row__btn-left {\n  border-top: 2px solid #2b2528;\n  border-left: 2px solid #2b2528;\n  border-right: 2px solid #3e3439;\n  border-bottom: 2px solid #3e3439;\n  border-top-left-radius: 6px;\n  border-bottom-left-radius: 6px;\n}\n.group-btn-arrows__row__btn-down {\n  border-top: 2px solid #3e3439;\n  border-left: 2px solid #2b2528;\n  border-right: 2px solid #2b2528;\n  border-bottom: 2px solid #3e3439;\n  border-bottom-left-radius: 6px;\n  border-bottom-right-radius: 6px;\n}\n.group-btn-arrows__row__btn-empty {\n  border: 1px solid #3e3439;\n}\n.group-btn-arrows__row__btn-right {\n  border-top: 2px solid #2b2528;\n  border-left: 2px solid #3e3439;\n  border-right: 2px solid #2b2528;\n  border-bottom: 2px solid #2b2528;\n  border-top-right-radius: 6px;\n  border-bottom-right-radius: 6px;\n}\n.game-controller {\n  display: flex;\n  justify-content: space-between;\n  min-width: 300px;\n  padding: 12px 14px 10px;\n}\n.group-btn-functions {\n  display: flex;\n  justify-content: space-around;\n  background-color: #ccc;\n  height: 56px;\n  width: 120px;\n  padding: 6px 2px;\n  border-radius: 40px;\n  transform: rotate(-30deg);\n  margin-top: 30px;\n}\n.group-btn-functions__btn {\n  background-color: #793c59;\n  border: 3px solid #3e3439;\n  width: 44px;\n  height: 44px;\n  border-radius: 100%;\n}\n",""])},function(n,t,e){var r=e(8);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(0)(r,o);r.locals&&(n.exports=r.locals)},function(n,t){n.exports=function(n){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var e=t.protocol+"//"+t.host,r=e+t.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,t){var o,i=t.trim().replace(/^"(.*)"$/,function(n,t){return t}).replace(/^'(.*)'$/,function(n,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?n:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?e+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(n,t,e){(n.exports=e(1)(!1)).push([n.i,'/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n',""])},function(n,t,e){var r=e(11);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(0)(r,o);r.locals&&(n.exports=r.locals)},function(n,t,e){"use strict";t.__esModule=!0,e(12),e(9);var r=e(7),o=document.getElementById("matrix"),i=new r.default(o,{width:10,height:20}),s=document.getElementById("page-home"),a=document.getElementById("page-game-over"),c=document.getElementById("btn-start"),l=document.getElementById("btn-play-again"),d=document.getElementById("topbar"),u=document.getElementById("topbar-level"),p=document.getElementById("topbar-score"),f=document.getElementById("pad-score"),h=document.getElementById("btn-arrow-up"),m=document.getElementById("btn-arrow-down"),b=document.getElementById("btn-arrow-left"),v=document.getElementById("btn-arrow-right"),g=document.getElementById("btn-a"),y=document.getElementById("btn-b");i.on("gamestart",function(){u.textContent="Level: "+i.level,p.textContent="Score: "+i.score}),i.on("change",function(){u.textContent="Level: "+i.level,p.textContent="Score: "+i.score}),i.on("gameover",function(){a.classList.remove("hidden"),f.innerHTML="Your Score: "+i.score});var x=function(n){n.preventDefault(),i.start(),d.classList.remove("hidden"),s.classList.add("hidden"),a.classList.add("hidden")};c.addEventListener("click",x,!1),l.addEventListener("click",x,!1),h.addEventListener("click",function(){return i.isStarted&&i.rotateCurrentPiece()},!1),m.addEventListener("click",function(){return i.isStarted&&i.moveCurrentPieceToBottom()},!1),b.addEventListener("click",function(){return i.isStarted&&i.moveCurrentPieceToLeft()},!1),v.addEventListener("click",function(){return i.isStarted&&i.moveCurrentPieceToRight()},!1),g.addEventListener("click",function(n){n.preventDefault(),i.isStarted?i.rotateCurrentPiece():x(n)},!1),y.addEventListener("click",function(n){n.preventDefault(),i.isStarted?i.dropCurrentPieceAllTheWayToBottom():x(n)},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWF0cml4LWJsb2NrLnRzIiwid2VicGFjazovLy8uL3NyYy90ZXRyb21pbm9lcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2h1ZmZsZS50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXZlbnRlbWl0dGVyMy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdGV0cmlzLnRzIiwid2VicGFjazovLy8uL3NyYy90ZXRyaXMtZG9tLnRzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmNzcz9kOGMzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS5jc3Mvbm9ybWFsaXplLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLmNzcy9ub3JtYWxpemUuY3NzPzI0OTMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJmbiIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJhcHBseSIsInRoaXMiLCJhcmd1bWVudHMiLCJnZXRFbGVtZW50IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwib3B0aW9ucyIsImxlbmd0aCIsIml0ZW0iLCJkb21TdHlsZSIsImlkIiwicmVmcyIsImoiLCJwYXJ0cyIsInB1c2giLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsImxpc3QiLCJuZXdTdHlsZXMiLCJiYXNlIiwicGFydCIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJpbnNlcnRJbnRvIiwiRXJyb3IiLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmRDaGlsZCIsImZpcnN0Q2hpbGQiLCJiZWZvcmUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJpZHgiLCJpbmRleE9mIiwic3BsaWNlIiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImF0dHJzIiwidHlwZSIsImFkZEF0dHJzIiwiZWwiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInNldEF0dHJpYnV0ZSIsIm9iaiIsInVwZGF0ZSIsInJlbW92ZSIsInJlc3VsdCIsInRyYW5zZm9ybSIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiYmluZCIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJidG9hIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJ1bmRlZmluZWQiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJibG9iIiwib2xkU3JjIiwiaHJlZiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwidXNlU291cmNlTWFwIiwidG9TdHJpbmciLCJtYXAiLCJjb250ZW50IiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJjb25jYXQiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJNYXRyaXhCbG9jayIsImxhYmVsIiwiaXNQc2V1ZG8iLCJzZXRFbXB0eSIsImlzRW1wdHkiLCJURVRST01JTk9fSSIsImNvb3JkcyIsIlRFVFJPTUlOT19KIiwiVEVUUk9NSU5PX0wiLCJURVRST01JTk9fTyIsIlRFVFJPTUlOT19TIiwiVEVUUk9NSU5PX1QiLCJURVRST01JTk9fWiIsImEiLCJhcnIiLCJzbGljZSIsInJhbmRvbUluZGV4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicmFuZG9tRWxlbWVudCIsImhhcyIsInByZWZpeCIsIkV2ZW50cyIsImFkZExpc3RlbmVyIiwiZW1pdHRlciIsImV2ZW50IiwiY29udGV4dCIsIm9uY2UiLCJUeXBlRXJyb3IiLCJsaXN0ZW5lciIsImV2dCIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJjbGVhckV2ZW50IiwiRXZlbnRFbWl0dGVyIiwiY3JlYXRlIiwiX19wcm90b19fIiwiZXZlbnROYW1lcyIsImV2ZW50cyIsIm5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibGlzdGVuZXJzIiwiaGFuZGxlcnMiLCJlZSIsIkFycmF5IiwibGlzdGVuZXJDb3VudCIsImVtaXQiLCJhMSIsImEyIiwiYTMiLCJhNCIsImE1IiwiYXJncyIsImxlbiIsInJlbW92ZUxpc3RlbmVyIiwib24iLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJvZmYiLCJwcmVmaXhlZCIsImV2ZW50ZW1pdHRlcjNfMSIsInNodWZmbGVfMSIsInRldHJvbWlub2VzXzEiLCJtYXRyaXhfYmxvY2tfMSIsIlRldHJpcyIsIm9wdGlvbiIsIm1vdmVzIiwiaXNTdGFydGVkIiwibGV2ZWwiLCJzY29yZSIsInBpZWNlQ291bnQiLCJkZWxheSIsInRldHJvbWlub2VzIiwiZXZlbnRFbWl0dGVyIiwiZHJhdyIsImluaXRNYXRyaXgiLCJfYSIsIndpZHRoIiwiaGVpZ2h0IiwibWF0cml4IiwiaXNBcnJheSIsInNldE5ld1BpZWNlIiwicmFuZG9tQmxvY2siLCJjb29yZCIsImN1cnJlbnRQaWVjZSIsInRldHJvbWlubyIsInBvcyIsIngiLCJ5IiwiZ2V0UG9zQXJyIiwicm90YXRlSW5kZXgiLCJjYW5QbGFjZUJsb2NrcyIsInBvc0FyciIsIl90aGlzIiwiZXZlcnkiLCJibG9jayIsImVyYXNlQmxvY2tzIiwicm93IiwiY2FuVGhyb3dOZXdCbG9jayIsImdldEZpeGVkUG9zQXJyRGF0YSIsImRlbHRhWSIsImZpeGVkUG9zQXJyIiwibmV4dFBvc0FyciIsInNldEJsb2NrcyIsInBpZWNlIiwiY2xlYXJSb3dJZk5lZWRlZCIsIl9iIiwic2NvcmVUaGlzUm91bmQiLCJjbGVhcmVkUm93cyIsInNvbWUiLCJzdGFydCIsImNoYW5nZUxldmVsSWZOZWVkZWQiLCJuZXdMZXZlbCIsImNlaWwiLCJuZXdEZWxheSIsInRocm93TmV3UGllY2UiLCJ0aW1lciIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImdhbWVPdmVyIiwibW92ZUN1cnJlbnRQaWVjZVRvTGVmdCIsIm1vdmVDdXJyZW50UGllY2VUb1JpZ2h0IiwibW92ZUN1cnJlbnRQaWVjZVRvQm90dG9tIiwiZHJvcEN1cnJlbnRQaWVjZUFsbFRoZVdheVRvQm90dG9tIiwicm90YXRlQ3VycmVudFBpZWNlIiwibmV4dFJvdGF0ZUluZGV4IiwibmV4dENvb3JkIiwiZnVuYyIsImRlc3Ryb3kiLCJUZXRyaXNEb20iLCJfc3VwZXIiLCJlbGVtZW50IiwiaXNBbmltYXRpbmciLCJsYXN0SHRtbCIsImFkZEV2ZW50TGlzdGVuZXJzIiwic3RvcEFuaW1hdGlvbkxvb3AiLCJfX2V4dGVuZHMiLCJodG1sIiwiY3NzQ2xhc3NlcyIsImlubmVySFRNTCIsImJpbmRlZEhhbmRsZUtleURvd24iLCJoYW5kbGVLZXlEb3duIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNvZGUiLCJyZW1vdmVFdmVudExpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzdGFydEFuaW1hdGlvbkxvb3AiLCJzZWxmIiwibG9vcCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImhtciIsImxvY2FscyIsImxvY2F0aW9uIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsInJlcGxhY2UiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwidHJpbSIsIiQxIiwidGVzdCIsInRldHJpc19kb21fMSIsImdldEVsZW1lbnRCeUlkIiwiZ2FtZSIsInBhZ2VIb21lIiwicGFnZUdhbWVPdmVyIiwiYnRuU3RhcnQiLCJidG5QbGF5QWdhaW4iLCJ0b3BiYXIiLCJ0b3BiYXJMZXZlbCIsInRvcGJhclNjb3JlIiwicGFkU2NvcmUiLCJidG5BcnJvd1VwIiwiYnRuQXJyb3dEb3duIiwiYnRuQXJyb3dMZWZ0IiwiYnRuQXJyb3dSaWdodCIsImJ0bkEiLCJidG5CIiwidGV4dENvbnRlbnQiLCJjbGFzc0xpc3QiLCJzdGFydEdhbWUiLCJwcmV2ZW50RGVmYXVsdCIsImFkZCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQ0FLLGNBQUEsRUFDQUMsWUFBQSxFQUNBQyxJQUFBTixLQU1BWixFQUFBbUIsRUFBQSxTQUFBakIsR0FDQVksT0FBQUMsZUFBQWIsRUFBQSxjQUFpRGtCLE9BQUEsS0FJakRwQixFQUFBcUIsRUFBQSxTQUFBbEIsR0FDQSxJQUFBUyxFQUFBVCxLQUFBbUIsV0FDQSxXQUEyQixPQUFBbkIsRUFBQSxTQUMzQixXQUFpQyxPQUFBQSxHQUVqQyxPQURBSCxFQUFBVSxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFaLEVBQUFhLEVBQUEsU0FBQVUsRUFBQUMsR0FBc0QsT0FBQVYsT0FBQVcsVUFBQUMsZUFBQW5CLEtBQUFnQixFQUFBQyxJQUd0RHhCLEVBQUEyQixFQUFBLFNBSUEzQixJQUFBNEIsRUFBQSxzQkM5REEsSUFFQUMsRUFDQUMsRUFIQUMsS0FXQUMsR0FUQUgsRUFTQSxXQU1BLE9BQUFJLFFBQUFDLG1CQUFBQyxNQUFBRixPQUFBRyxNQVpBLFdBRUEsWUFEQSxJQUFBTixNQUFBRCxFQUFBUSxNQUFBQyxLQUFBQyxZQUNBVCxJQWlCQVUsRUFB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Q3pDMkcsRUFBWVEsWUFBYyxVQUFVZixFQUFLbkcsUUFHM0NtRyxFQUFLaEgsR0FBRyxXQUFZLFdBQ2xCa0gsRUFBYWMsVUFBVTlPLE9BQU8sVUFDOUJzTyxFQUFTckMsVUFBWSxlQUFlNkIsRUFBS25HLFFBRzNDLElBQU1vSCxFQUFZLFNBQUMvSixHQUNqQkEsRUFBTWdLLGlCQUNObEIsRUFBSzFELFFBQ0wrRCxFQUFPVyxVQUFVOU8sT0FBTyxVQUN4QitOLEVBQVNlLFVBQVVHLElBQUksVUFDdkJqQixFQUFhYyxVQUFVRyxJQUFJLFdBRzdCaEIsRUFBUzdCLGlCQUFpQixRQUFTMkMsR0FBVyxHQUU5Q2IsRUFBYTlCLGlCQUFpQixRQUFTMkMsR0FBVyxHQUVsRFIsRUFBV25DLGlCQUFpQixRQUFTLFdBQU0sT0FBQTBCLEVBQUtyRyxXQUFhcUcsRUFBSzVDLHVCQUFzQixHQUN4RnNELEVBQWFwQyxpQkFBaUIsUUFBUyxXQUFNLE9BQUEwQixFQUFLckcsV0FBYXFHLEVBQUs5Qyw2QkFBNEIsR0FDaEd5RCxFQUFhckMsaUJBQWlCLFFBQVMsV0FBTSxPQUFBMEIsRUFBS3JHLFdBQWFxRyxFQUFLaEQsMkJBQTBCLEdBQzlGNEQsRUFBY3RDLGlCQUFpQixRQUFTLFdBQU0sT0FBQTBCLEVBQUtyRyxXQUFhcUcsRUFBSy9DLDRCQUEyQixHQUVoRzRELEVBQUt2QyxpQkFBaUIsUUFBUyxTQUFDcEgsR0FDOUJBLEVBQU1nSyxpQkFDRmxCLEVBQUtyRyxVQUNQcUcsRUFBSzVDLHFCQUdMNkQsRUFBVS9KLEtBRVgsR0FFSDRKLEVBQUt4QyxpQkFBaUIsUUFBUyxTQUFDcEgsR0FDOUJBLEVBQU1nSyxpQkFDRmxCLEVBQUtyRyxVQUNQcUcsRUFBSzdDLG9DQUdMOEQsRUFBVS9KLEtBRVgiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL2Rpc3QvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMyk7XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBNYXRyaXhCbG9jayB7XG5cbiAgaWQ6IG51bWJlcjtcbiAgbGFiZWw6IHN0cmluZztcbiAgaXNQc2V1ZG86IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihpZCA9IDAsIGxhYmVsID0gJ2VtcHR5JywgaXNQc2V1ZG8gPSBmYWxzZSkge1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLmxhYmVsID0gbGFiZWw7XG4gICAgdGhpcy5pc1BzZXVkbyA9IGlzUHNldWRvO1xuICB9XG5cbiAgc2V0RW1wdHkoKSB7XG4gICAgdGhpcy5pZCA9IDA7XG4gICAgdGhpcy5sYWJlbCA9ICdlbXB0eSc7XG4gICAgdGhpcy5pc1BzZXVkbyA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gKCdlbXB0eScgPT09IHRoaXMubGFiZWwpICYmICgwID09PSB0aGlzLmlkKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtQb2ludDJkLCBUZXRyb21pbm99IGZyb20gJy4vdHlwZXMnO1xuXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9UZXRyaXMjVGV0cm9taW5vX2NvbG9yc1xuLyoqXG4gKiAgICAgICAgICAgICDlj6NcbiAqIOWPo+WPo+WPo+WPoyA9PiDlj6NcbiAqICAgICAgICAgICAgIOWPo1xuICogICAgICAgICAgICAg5Y+jXG4gKiovXG5leHBvcnQgY29uc3QgVEVUUk9NSU5PX0k6IFRldHJvbWlubyA9IHtcbiAgbGFiZWw6ICdJJyxcbiAgY29vcmRzOiBbXG4gICAgW1sxLCAwXSwgWzEsIDFdLCBbMSwgMl0sIFsxLCAzXV0sXG4gICAgW1swLCAxXSwgWzEsIDFdLCBbMiwgMV0sIFszLCAxXV0sXG4gIF1cbn07XG5cbi8qKlxuICog5Y+j5Y+j5Y+jICAgICAg5Y+jICAgIOWPoyAgICAgICAg5Y+j5Y+jXG4gKiAgICAg5Y+jID0+ICAg5Y+jID0+IOWPo+WPo+WPoyA9PiDlj6NcbiAqICAgICAgICAgICDlj6Plj6MgICAgICAgICAgICAgIOWPo1xuICoqL1xuZXhwb3J0IGNvbnN0IFRFVFJPTUlOT19KOiBUZXRyb21pbm8gPSB7XG4gIGxhYmVsOiAnSicsXG4gIGNvb3JkczogW1xuICAgIFtbMCwgMF0sIFswLCAxXSwgWzAsIDJdLCBbMSwgMl1dLFxuICAgIFtbMCwgMV0sIFsxLCAxXSwgWzIsIDBdLCBbMiwgMV1dLFxuICAgIFtbMCwgMF0sIFsxLCAwXSwgWzEsIDFdLCBbMSwgMl1dLFxuICAgIFtbMCwgMF0sIFswLCAxXSwgWzEsIDBdLCBbMiwgMF1dXG4gIF1cbn07XG5cbi8qKlxuICog5Y+j5Y+j5Y+jICAgIOWPo+WPoyAgICAgICAg5Y+jICAgIOWPo1xuICog5Y+jICAgICA9PiAgIOWPoyA9PiDlj6Plj6Plj6MgPT4g5Y+jXG4gKiAgICAgICAgICAgICDlj6MgICAgICAgICAgICAgIOWPo+WPo1xuICoqL1xuZXhwb3J0IGNvbnN0IFRFVFJPTUlOT19MOiBUZXRyb21pbm8gPSB7XG4gIGxhYmVsOiAnTCcsXG4gIGNvb3JkczogW1xuICAgIFtbMCwgMF0sIFswLCAxXSwgWzAsIDJdLCBbMSwgMF1dLFxuICAgIFtbMCwgMF0sIFswLCAxXSwgWzEsIDFdLCBbMiwgMV1dLFxuICAgIFtbMCwgMl0sIFsxLCAwXSwgWzEsIDFdLCBbMSwgMl1dLFxuICAgIFtbMCwgMF0sIFsxLCAwXSwgWzIsIDBdLCBbMiwgMV1dXG4gIF1cbn07XG5cbi8qKlxuICog5Y+j5Y+jXG4gKiDlj6Plj6NcbiAqKi9cbmV4cG9ydCBjb25zdCBURVRST01JTk9fTzogVGV0cm9taW5vID0ge1xuICBsYWJlbDogJ08nLFxuICBjb29yZHM6IFtcbiAgICBbWzAsIDBdLCBbMCwgMV0sIFsxLCAwXSwgWzEsIDFdXVxuICBdXG59O1xuXG4vKipcbiAqICAg5Y+j5Y+jICAgIOWPo1xuICog5Y+j5Y+jICAgPT4g5Y+j5Y+jXG4gKiAgICAgICAgICAgICDlj6NcbiAqKi9cbmV4cG9ydCBjb25zdCBURVRST01JTk9fUzogVGV0cm9taW5vID0ge1xuICBsYWJlbDogJ1MnLFxuICBjb29yZHM6IFtcbiAgICBbWzAsIDBdLCBbMSwgMF0sIFsxLCAxXSwgWzIsIDFdXSxcbiAgICBbWzAsIDFdLCBbMCwgMl0sIFsxLCAwXSwgWzEsIDFdXVxuICBdXG59O1xuXG4vKipcbiAqIOWPo+WPo+WPoyA9PiAgIOWPoyA9PiAgIOWPoyAgID0+IOWPo1xuICogICDlj6MgICAgICDlj6Plj6MgICAg5Y+j5Y+j5Y+jICAgIOWPo+WPo1xuICogICAgICAgICAgICAg5Y+jICAgICAgICAgICAgICDlj6NcbiAqKi9cbmV4cG9ydCBjb25zdCBURVRST01JTk9fVDogVGV0cm9taW5vID0ge1xuICBsYWJlbDogJ1QnLFxuICBjb29yZHM6IFtcbiAgICBbWzAsIDBdLCBbMCwgMV0sIFswLCAyXSwgWzEsIDFdXSxcbiAgICBbWzAsIDFdLCBbMSwgMF0sIFsxLCAxXSwgWzIsIDFdXSxcbiAgICBbWzAsIDFdLCBbMSwgMF0sIFsxLCAxXSwgWzEsIDJdXSxcbiAgICBbWzAsIDBdLCBbMSwgMF0sIFsxLCAxXSwgWzIsIDBdXVxuICBdXG59O1xuXG4vKipcbiAqIOWPo+WPoyAgICAgICAgIOWPo1xuICogICDlj6Plj6MgPT4gIOWPo+WPo1xuICogICAgICAgICAgICDlj6NcbiAqKi9cbmV4cG9ydCBjb25zdCBURVRST01JTk9fWjogVGV0cm9taW5vID0ge1xuICBsYWJlbDogJ1onLFxuICBjb29yZHM6IFtcbiAgICBbWzAsIDBdLCBbMCwgMV0sIFsxLCAxXSwgWzEsIDJdXSxcbiAgICBbWzAsIDFdLCBbMSwgMF0sIFsxLCAxXSwgWzIsIDBdXVxuICBdXG59O1xuIiwiLy8gaHR0cHM6Ly9ib3N0Lm9ja3Mub3JnL21pa2Uvc2h1ZmZsZS9jb21wYXJlLmh0bWxcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXBsaWUva251dGgtc2h1ZmZsZVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2h1ZmZsZTxUPihhOiBUW10pOiBUW10ge1xuXG4gIGNvbnN0IGFyciA9IGEuc2xpY2UoMCk7XG4gIGxldCBsZW5ndGggPSBhcnIubGVuZ3RoO1xuXG4gIGlmIChsZW5ndGggPCAyKSB7XG4gICAgcmV0dXJuIGFycjtcbiAgfVxuXG4gIHdoaWxlIChsZW5ndGgpIHtcblxuICAgIGxldCByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGxlbmd0aC0tKTtcbiAgICBsZXQgcmFuZG9tRWxlbWVudCA9IGFycltyYW5kb21JbmRleF07XG5cbiAgICB3aGlsZSAocmFuZG9tSW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycltyYW5kb21JbmRleF0gPSBhcnJbKytyYW5kb21JbmRleF07XG4gICAgfVxuXG4gICAgYXJyW3JhbmRvbUluZGV4XSA9IHJhbmRvbUVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gYXJyO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxuICAsIHByZWZpeCA9ICd+JztcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciB0byBjcmVhdGUgYSBzdG9yYWdlIGZvciBvdXIgYEVFYCBvYmplY3RzLlxuICogQW4gYEV2ZW50c2AgaW5zdGFuY2UgaXMgYSBwbGFpbiBvYmplY3Qgd2hvc2UgcHJvcGVydGllcyBhcmUgZXZlbnQgbmFtZXMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFdmVudHMoKSB7fVxuXG4vL1xuLy8gV2UgdHJ5IHRvIG5vdCBpbmhlcml0IGZyb20gYE9iamVjdC5wcm90b3R5cGVgLiBJbiBzb21lIGVuZ2luZXMgY3JlYXRpbmcgYW5cbi8vIGluc3RhbmNlIGluIHRoaXMgd2F5IGlzIGZhc3RlciB0aGFuIGNhbGxpbmcgYE9iamVjdC5jcmVhdGUobnVsbClgIGRpcmVjdGx5LlxuLy8gSWYgYE9iamVjdC5jcmVhdGUobnVsbClgIGlzIG5vdCBzdXBwb3J0ZWQgd2UgcHJlZml4IHRoZSBldmVudCBuYW1lcyB3aXRoIGFcbi8vIGNoYXJhY3RlciB0byBtYWtlIHN1cmUgdGhhdCB0aGUgYnVpbHQtaW4gb2JqZWN0IHByb3BlcnRpZXMgYXJlIG5vdFxuLy8gb3ZlcnJpZGRlbiBvciB1c2VkIGFzIGFuIGF0dGFjayB2ZWN0b3IuXG4vL1xuaWYgKE9iamVjdC5jcmVhdGUpIHtcbiAgRXZlbnRzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgLy9cbiAgLy8gVGhpcyBoYWNrIGlzIG5lZWRlZCBiZWNhdXNlIHRoZSBgX19wcm90b19fYCBwcm9wZXJ0eSBpcyBzdGlsbCBpbmhlcml0ZWQgaW5cbiAgLy8gc29tZSBvbGQgYnJvd3NlcnMgbGlrZSBBbmRyb2lkIDQsIGlQaG9uZSA1LjEsIE9wZXJhIDExIGFuZCBTYWZhcmkgNS5cbiAgLy9cbiAgaWYgKCFuZXcgRXZlbnRzKCkuX19wcm90b19fKSBwcmVmaXggPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRhdGlvbiBvZiBhIHNpbmdsZSBldmVudCBsaXN0ZW5lci5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHBhcmFtIHtCb29sZWFufSBbb25jZT1mYWxzZV0gU3BlY2lmeSBpZiB0aGUgbGlzdGVuZXIgaXMgYSBvbmUtdGltZSBsaXN0ZW5lci5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRUUoZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdGhpcy5mbiA9IGZuO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLm9uY2UgPSBvbmNlIHx8IGZhbHNlO1xufVxuXG4vKipcbiAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlbWl0dGVyIFJlZmVyZW5jZSB0byB0aGUgYEV2ZW50RW1pdHRlcmAgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHBhcmFtIHtCb29sZWFufSBvbmNlIFNwZWNpZnkgaWYgdGhlIGxpc3RlbmVyIGlzIGEgb25lLXRpbWUgbGlzdGVuZXIuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYWRkTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXIgPSBuZXcgRUUoZm4sIGNvbnRleHQgfHwgZW1pdHRlciwgb25jZSlcbiAgICAsIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCFlbWl0dGVyLl9ldmVudHNbZXZ0XSkgZW1pdHRlci5fZXZlbnRzW2V2dF0gPSBsaXN0ZW5lciwgZW1pdHRlci5fZXZlbnRzQ291bnQrKztcbiAgZWxzZSBpZiAoIWVtaXR0ZXIuX2V2ZW50c1tldnRdLmZuKSBlbWl0dGVyLl9ldmVudHNbZXZ0XS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZSBlbWl0dGVyLl9ldmVudHNbZXZ0XSA9IFtlbWl0dGVyLl9ldmVudHNbZXZ0XSwgbGlzdGVuZXJdO1xuXG4gIHJldHVybiBlbWl0dGVyO1xufVxuXG4vKipcbiAqIENsZWFyIGV2ZW50IGJ5IG5hbWUuXG4gKlxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IGVtaXR0ZXIgUmVmZXJlbmNlIHRvIHRoZSBgRXZlbnRFbWl0dGVyYCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldnQgVGhlIEV2ZW50IG5hbWUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjbGVhckV2ZW50KGVtaXR0ZXIsIGV2dCkge1xuICBpZiAoLS1lbWl0dGVyLl9ldmVudHNDb3VudCA9PT0gMCkgZW1pdHRlci5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICBlbHNlIGRlbGV0ZSBlbWl0dGVyLl9ldmVudHNbZXZ0XTtcbn1cblxuLyoqXG4gKiBNaW5pbWFsIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZSB0aGF0IGlzIG1vbGRlZCBhZ2FpbnN0IHRoZSBOb2RlLmpzXG4gKiBgRXZlbnRFbWl0dGVyYCBpbnRlcmZhY2UuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIGFuIGFycmF5IGxpc3RpbmcgdGhlIGV2ZW50cyBmb3Igd2hpY2ggdGhlIGVtaXR0ZXIgaGFzIHJlZ2lzdGVyZWRcbiAqIGxpc3RlbmVycy5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHZhciBuYW1lcyA9IFtdXG4gICAgLCBldmVudHNcbiAgICAsIG5hbWU7XG5cbiAgaWYgKHRoaXMuX2V2ZW50c0NvdW50ID09PSAwKSByZXR1cm4gbmFtZXM7XG5cbiAgZm9yIChuYW1lIGluIChldmVudHMgPSB0aGlzLl9ldmVudHMpKSB7XG4gICAgaWYgKGhhcy5jYWxsKGV2ZW50cywgbmFtZSkpIG5hbWVzLnB1c2gocHJlZml4ID8gbmFtZS5zbGljZSgxKSA6IG5hbWUpO1xuICB9XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICByZXR1cm4gbmFtZXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZXZlbnRzKSk7XG4gIH1cblxuICByZXR1cm4gbmFtZXM7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKGV2ZW50KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50XG4gICAgLCBoYW5kbGVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmICghaGFuZGxlcnMpIHJldHVybiBbXTtcbiAgaWYgKGhhbmRsZXJzLmZuKSByZXR1cm4gW2hhbmRsZXJzLmZuXTtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGhhbmRsZXJzLmxlbmd0aCwgZWUgPSBuZXcgQXJyYXkobCk7IGkgPCBsOyBpKyspIHtcbiAgICBlZVtpXSA9IGhhbmRsZXJzW2ldLmZuO1xuICB9XG5cbiAgcmV0dXJuIGVlO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIG51bWJlciBvZiBsaXN0ZW5lcnMgbGlzdGVuaW5nIHRvIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWJlciBvZiBsaXN0ZW5lcnMuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIGxpc3RlbmVyQ291bnQoZXZlbnQpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgICAsIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmICghbGlzdGVuZXJzKSByZXR1cm4gMDtcbiAgaWYgKGxpc3RlbmVycy5mbikgcmV0dXJuIDE7XG4gIHJldHVybiBsaXN0ZW5lcnMubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBDYWxscyBlYWNoIG9mIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBldmVudCBoYWQgbGlzdGVuZXJzLCBlbHNlIGBmYWxzZWAuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQoZXZlbnQsIGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdXG4gICAgLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBhcmdzXG4gICAgLCBpO1xuXG4gIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAobGlzdGVuZXJzLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVycy5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICBjYXNlIDE6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCksIHRydWU7XG4gICAgICBjYXNlIDI6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEpLCB0cnVlO1xuICAgICAgY2FzZSAzOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiksIHRydWU7XG4gICAgICBjYXNlIDQ6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMyksIHRydWU7XG4gICAgICBjYXNlIDU6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQpLCB0cnVlO1xuICAgICAgY2FzZSA2OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0LCBhNSksIHRydWU7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mbi5hcHBseShsaXN0ZW5lcnMuY29udGV4dCwgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGhcbiAgICAgICwgajtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGxpc3RlbmVyc1tpXS5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnNbaV0uZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICAgIGNhc2UgMTogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQpOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEpOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgNDogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMiwgYTMpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoIWFyZ3MpIGZvciAoaiA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICBhcmdzW2ogLSAxXSA9IGFyZ3VtZW50c1tqXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4uYXBwbHkobGlzdGVuZXJzW2ldLmNvbnRleHQsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IFtjb250ZXh0PXRoaXNdIFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICByZXR1cm4gYWRkTGlzdGVuZXIodGhpcywgZXZlbnQsIGZuLCBjb250ZXh0LCBmYWxzZSk7XG59O1xuXG4vKipcbiAqIEFkZCBhIG9uZS10aW1lIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICByZXR1cm4gYWRkTGlzdGVuZXIodGhpcywgZXZlbnQsIGZuLCBjb250ZXh0LCB0cnVlKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBsaXN0ZW5lcnMgb2YgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBPbmx5IHJlbW92ZSB0aGUgbGlzdGVuZXJzIHRoYXQgbWF0Y2ggdGhpcyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBPbmx5IHJlbW92ZSB0aGUgbGlzdGVuZXJzIHRoYXQgaGF2ZSB0aGlzIGNvbnRleHQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgT25seSByZW1vdmUgb25lLXRpbWUgbGlzdGVuZXJzLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiB0aGlzO1xuICBpZiAoIWZuKSB7XG4gICAgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAoXG4gICAgICBsaXN0ZW5lcnMuZm4gPT09IGZuICYmXG4gICAgICAoIW9uY2UgfHwgbGlzdGVuZXJzLm9uY2UpICYmXG4gICAgICAoIWNvbnRleHQgfHwgbGlzdGVuZXJzLmNvbnRleHQgPT09IGNvbnRleHQpXG4gICAgKSB7XG4gICAgICBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwLCBldmVudHMgPSBbXSwgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGxpc3RlbmVyc1tpXS5mbiAhPT0gZm4gfHxcbiAgICAgICAgKG9uY2UgJiYgIWxpc3RlbmVyc1tpXS5vbmNlKSB8fFxuICAgICAgICAoY29udGV4dCAmJiBsaXN0ZW5lcnNbaV0uY29udGV4dCAhPT0gY29udGV4dClcbiAgICAgICkge1xuICAgICAgICBldmVudHMucHVzaChsaXN0ZW5lcnNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vXG4gICAgLy8gUmVzZXQgdGhlIGFycmF5LCBvciByZW1vdmUgaXQgY29tcGxldGVseSBpZiB3ZSBoYXZlIG5vIG1vcmUgbGlzdGVuZXJzLlxuICAgIC8vXG4gICAgaWYgKGV2ZW50cy5sZW5ndGgpIHRoaXMuX2V2ZW50c1tldnRdID0gZXZlbnRzLmxlbmd0aCA9PT0gMSA/IGV2ZW50c1swXSA6IGV2ZW50cztcbiAgICBlbHNlIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYWxsIGxpc3RlbmVycywgb3IgdGhvc2Ugb2YgdGhlIHNwZWNpZmllZCBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gW2V2ZW50XSBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpIHtcbiAgdmFyIGV2dDtcblxuICBpZiAoZXZlbnQpIHtcbiAgICBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuICAgIGlmICh0aGlzLl9ldmVudHNbZXZ0XSkgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vXG4vLyBBbGlhcyBtZXRob2RzIG5hbWVzIGJlY2F1c2UgcGVvcGxlIHJvbGwgbGlrZSB0aGF0LlxuLy9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBwcmVmaXguXG4vL1xuRXZlbnRFbWl0dGVyLnByZWZpeGVkID0gcHJlZml4O1xuXG4vL1xuLy8gQWxsb3cgYEV2ZW50RW1pdHRlcmAgdG8gYmUgaW1wb3J0ZWQgYXMgbW9kdWxlIG5hbWVzcGFjZS5cbi8vXG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xuaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgbW9kdWxlKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xufVxuIiwiaW1wb3J0IHtFdmVudEVtaXR0ZXJ9IGZyb20gJ2V2ZW50ZW1pdHRlcjMnO1xuaW1wb3J0IHNodWZmbGUgZnJvbSAnLi9zaHVmZmxlJztcbmltcG9ydCB7XG4gIFRFVFJPTUlOT19JLFxuICBURVRST01JTk9fSixcbiAgVEVUUk9NSU5PX0wsXG4gIFRFVFJPTUlOT19PLFxuICBURVRST01JTk9fUyxcbiAgVEVUUk9NSU5PX1QsXG4gIFRFVFJPTUlOT19aXG59IGZyb20gJy4vdGV0cm9taW5vZXMnO1xuaW1wb3J0IHtUZXRyb21pbm8sIFRldHJvbWlub0NvbnRyb2xsZXIsIFRldHJpc09wdGlvbiwgUG9pbnQyZH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgTWF0cml4QmxvY2sgZnJvbSAnLi9tYXRyaXgtYmxvY2snO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXRyaXMge1xuXG4gIG1vdmVzOiBudW1iZXIgPSAwO1xuXG4gIGlzU3RhcnRlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGxldmVsOiBudW1iZXIgPSAxO1xuXG4gIHNjb3JlOiBudW1iZXIgPSAwO1xuXG4gIGV2ZW50RW1pdHRlcjogYW55O1xuXG4gIG9wdGlvbjogVGV0cmlzT3B0aW9uO1xuXG4gIHBpZWNlQ291bnQ6IG51bWJlciA9IDA7XG5cbiAgZGVsYXk6IG51bWJlciA9IDEwMDA7XG5cbiAgdGltZXI6IG51bWJlcjtcblxuICBjdXJyZW50UGllY2U6IFRldHJvbWlub0NvbnRyb2xsZXI7XG5cbiAgdGV0cm9taW5vZXM6IFRldHJvbWlub1tdID0gW1xuICAgIFRFVFJPTUlOT19PLFxuICAgIFRFVFJPTUlOT19KLFxuICAgIFRFVFJPTUlOT19MLFxuICAgIFRFVFJPTUlOT19TLFxuICAgIFRFVFJPTUlOT19aLFxuICAgIFRFVFJPTUlOT19ULFxuICAgIFRFVFJPTUlOT19JXG4gIF07XG5cbiAgcHJvdGVjdGVkIG1hdHJpeDogTWF0cml4QmxvY2tbXVtdO1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbjogVGV0cmlzT3B0aW9uKSB7XG4gICAgdGhpcy5vcHRpb24gPSBvcHRpb247XG4gICAgdGhpcy5ldmVudEVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIH1cblxuICBkcmF3KCkge1xuICB9XG5cbiAgaW5pdE1hdHJpeCgpIHtcblxuICAgIGNvbnN0IHt3aWR0aCwgaGVpZ2h0fSA9IHRoaXMub3B0aW9uO1xuICAgIHRoaXMubWF0cml4ID0gW107XG5cbiAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgaGVpZ2h0OyBpKyspIHtcbiAgICAgIGlmICghIEFycmF5LmlzQXJyYXkodGhpcy5tYXRyaXhbaV0pKSB7XG4gICAgICAgIHRoaXMubWF0cml4W2ldID0gW107XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBqOiBudW1iZXIgPSAwOyBqIDwgd2lkdGg7IGorKykge1xuICAgICAgICB0aGlzLm1hdHJpeFtpXVtqXSA9IG5ldyBNYXRyaXhCbG9jaygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNldE5ld1BpZWNlKCkge1xuXG4gICAgY29uc3QgW3JhbmRvbUJsb2NrXSA9IHNodWZmbGUodGhpcy50ZXRyb21pbm9lcyk7XG4gICAgY29uc3QgW2Nvb3JkXSA9IHNodWZmbGUocmFuZG9tQmxvY2suY29vcmRzKTtcblxuICAgIHRoaXMucGllY2VDb3VudCArPSAxO1xuXG4gICAgdGhpcy5jdXJyZW50UGllY2UgPSB7XG4gICAgICBpZDogdGhpcy5waWVjZUNvdW50LFxuICAgICAgdGV0cm9taW5vOiByYW5kb21CbG9jayxcbiAgICAgIGNvb3JkLFxuICAgICAgcG9zOiB7eDogNCwgeTogMH0sXG4gICAgICBnZXRQb3NBcnIocG9zID0gdGhpcy5wb3MsIGNvb3JkID0gdGhpcy5jb29yZCkge1xuICAgICAgICByZXR1cm4gY29vcmQubWFwKChbeCwgeV0pID0+IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogcG9zLnggKyB4LFxuICAgICAgICAgICAgeTogcG9zLnkgKyB5XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgcm90YXRlSW5kZXg6IDBcbiAgICB9O1xuICB9XG5cbiAgY2FuUGxhY2VCbG9ja3MocG9zQXJyOiBQb2ludDJkW10pIHtcblxuICAgIHJldHVybiBwb3NBcnIuZXZlcnkocG9zID0+IHtcbiAgICAgIGlmICghIChwb3MueSBpbiB0aGlzLm1hdHJpeCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgYmxvY2sgPSB0aGlzLm1hdHJpeFtwb3MueV1bcG9zLnhdO1xuICAgICAgaWYgKGJsb2NrICYmIGJsb2NrLmlzRW1wdHkoKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChibG9jayAmJiBibG9jay5pZCA9PT0gdGhpcy5jdXJyZW50UGllY2UuaWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG4gIH1cblxuICBlcmFzZUJsb2NrcyhpZDogbnVtYmVyKSB7XG4gICAgdGhpcy5tYXRyaXgubWFwKHJvdyA9PiByb3cubWFwKGJsb2NrID0+IChibG9jay5pZCA9PT0gaWQpID8gYmxvY2suc2V0RW1wdHkoKSA6IGJsb2NrKSk7XG4gIH1cblxuICBjYW5UaHJvd05ld0Jsb2NrKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRQaWVjZS5nZXRQb3NBcnIoKVxuICAgICAgLmV2ZXJ5KHBvcyA9PiB0aGlzLm1hdHJpeFtwb3MueV1bcG9zLnhdLmlzRW1wdHkoKSk7XG4gIH1cblxuICAvLyB0aGUgcG9zIGFyciB3aGVyZSBhIHBpZWNlIHdpbGwgZmFsbFxuICBnZXRGaXhlZFBvc0FyckRhdGEocG9zQXJyOiBQb2ludDJkW10pIHtcblxuICAgIGxldCBjYW5QbGFjZSA9IHRydWU7XG4gICAgbGV0IGRlbHRhWSA9IDA7XG4gICAgbGV0IGZpeGVkUG9zQXJyID0gcG9zQXJyLnNsaWNlKDApO1xuXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGRlbHRhWSArPSAxO1xuICAgICAgY29uc3QgbmV4dFBvc0FyciA9IHBvc0Fyci5tYXAocG9zID0+ICh7eDogcG9zLngsIHk6IHBvcy55ICsgZGVsdGFZfSkpO1xuICAgICAgaWYgKHRoaXMuY2FuUGxhY2VCbG9ja3MobmV4dFBvc0FycikpIHtcbiAgICAgICAgZml4ZWRQb3NBcnIgPSBuZXh0UG9zQXJyO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge2RlbHRhWSwgZml4ZWRQb3NBcnJ9O1xuICB9XG5cbiAgc2V0QmxvY2tzKHBvc0FycjogUG9pbnQyZFtdLCBwaWVjZTogVGV0cm9taW5vQ29udHJvbGxlcikge1xuXG4gICAgY29uc3Qge2ZpeGVkUG9zQXJyfSA9IHRoaXMuZ2V0Rml4ZWRQb3NBcnJEYXRhKHBvc0Fycik7XG5cbiAgICBmaXhlZFBvc0Fyci5mb3JFYWNoKCh7eCwgeX0pID0+IHtcbiAgICAgIHRoaXMubWF0cml4W3ldW3hdID0gbmV3IE1hdHJpeEJsb2NrKHBpZWNlLmlkLCBwaWVjZS50ZXRyb21pbm8ubGFiZWwsIHRydWUpO1xuICAgIH0pO1xuXG4gICAgcG9zQXJyLmZvckVhY2goKHt4LCB5fSkgPT4ge1xuICAgICAgdGhpcy5tYXRyaXhbeV1beF0gPSBuZXcgTWF0cml4QmxvY2socGllY2UuaWQsIHBpZWNlLnRldHJvbWluby5sYWJlbCk7XG4gICAgfSk7XG4gIH1cblxuICBjbGVhclJvd0lmTmVlZGVkKCkge1xuXG4gICAgY29uc3Qge21hdHJpeCwgbGV2ZWx9ID0gdGhpcztcbiAgICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSB0aGlzLm9wdGlvbjtcbiAgICBjb25zdCBzY29yZVRoaXNSb3VuZCA9IG1hdHJpeC5maWx0ZXIocm93ID0+IHJvdy5ldmVyeShibG9jayA9PiAhIGJsb2NrLmlzRW1wdHkoKSkpLmxlbmd0aCAqIHdpZHRoICogbGV2ZWw7XG4gICAgY29uc3QgY2xlYXJlZFJvd3MgPSBtYXRyaXguZmlsdGVyKHJvdyA9PiByb3cuc29tZShibG9jayA9PiBibG9jay5pc0VtcHR5KCkpKTtcbiAgICBjb25zdCBzdGFydCA9IGhlaWdodCAtIGNsZWFyZWRSb3dzLmxlbmd0aDtcbiAgICB0aGlzLm1hdHJpeCA9IG1hdHJpeC5tYXAoKHJvdywgaSkgPT4ge1xuICAgICAgaWYgKGkgPCBzdGFydCkge1xuICAgICAgICByZXR1cm4gcm93Lm1hcChibG9jayA9PiBibG9jay5zZXRFbXB0eSgpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjbGVhcmVkUm93c1tpIC0gc3RhcnRdO1xuICAgIH0pO1xuXG4gICAgdGhpcy5zY29yZSArPSBzY29yZVRoaXNSb3VuZDtcbiAgICB0aGlzLmV2ZW50RW1pdHRlci5lbWl0KCdjaGFuZ2UnKTtcbiAgfVxuXG4gIGNoYW5nZUxldmVsSWZOZWVkZWQoKSB7XG4gICAgY29uc3QgbmV3TGV2ZWwgPSBNYXRoLmNlaWwodGhpcy5tb3ZlcyAvIDIwKTtcbiAgICBpZiAodGhpcy5sZXZlbCAhPSBuZXdMZXZlbCkge1xuICAgICAgdGhpcy5sZXZlbCA9IG5ld0xldmVsO1xuICAgICAgY29uc3QgbmV3RGVsYXkgPSAxMDAwIC0gKG5ld0xldmVsICogNTApO1xuICAgICAgdGhpcy5kZWxheSA9IG5ld0RlbGF5IDw9IDQwMCA/IDQwMCA6IG5ld0RlbGF5O1xuICAgICAgdGhpcy5ldmVudEVtaXR0ZXIuZW1pdCgnY2hhbmdlJyk7XG4gICAgfVxuICB9XG5cbiAgdGhyb3dOZXdQaWVjZSgpIHtcblxuICAgIGNvbnN0IHNldE1vdmluZ0Jsb2NrID0gKCkgPT4ge1xuXG4gICAgICBjb25zdCB7Y3VycmVudFBpZWNlfSA9IHRoaXM7XG4gICAgICBjb25zdCBwb3NBcnIgPSBjdXJyZW50UGllY2UuZ2V0UG9zQXJyKCk7XG5cbiAgICAgIHRoaXMuZXJhc2VCbG9ja3MoY3VycmVudFBpZWNlLmlkKTtcblxuICAgICAgaWYgKHRoaXMuY2FuUGxhY2VCbG9ja3MocG9zQXJyKSkge1xuXG4gICAgICAgIHRoaXMubW92ZXMgKz0gMTtcbiAgICAgICAgdGhpcy5jaGFuZ2VMZXZlbElmTmVlZGVkKCk7XG4gICAgICAgIHRoaXMuc2V0QmxvY2tzKHBvc0FyciwgY3VycmVudFBpZWNlKTtcblxuICAgICAgICBjb25zdCBuZXh0UG9zQXJyID0gY3VycmVudFBpZWNlLmdldFBvc0Fycih7XG4gICAgICAgICAgeDogY3VycmVudFBpZWNlLnBvcy54LFxuICAgICAgICAgIHk6IGN1cnJlbnRQaWVjZS5wb3MueSArIDFcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuY2FuUGxhY2VCbG9ja3MobmV4dFBvc0FycikpIHtcbiAgICAgICAgICBjdXJyZW50UGllY2UucG9zLnkgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpO1xuICAgICAgICAgIHRoaXMuc2V0TmV3UGllY2UoKTtcblxuICAgICAgICAgIGlmICh0aGlzLmNhblRocm93TmV3QmxvY2soKSkge1xuICAgICAgICAgICAgdGhpcy5jbGVhclJvd0lmTmVlZGVkKCk7XG4gICAgICAgICAgICB0aGlzLnRocm93TmV3UGllY2UoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5nYW1lT3ZlcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTtcbiAgICAgICAgdGhpcy5nYW1lT3ZlcigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudGltZXIgPSBzZXRJbnRlcnZhbChzZXRNb3ZpbmdCbG9jaywgdGhpcy5kZWxheSk7XG4gIH1cblxuICBtb3ZlQ3VycmVudFBpZWNlVG9MZWZ0KCkge1xuICAgIGNvbnN0IHtjdXJyZW50UGllY2V9ID0gdGhpcztcbiAgICBjb25zdCBuZXh0UG9zQXJyID0gY3VycmVudFBpZWNlLmdldFBvc0Fycih7XG4gICAgICB4OiBjdXJyZW50UGllY2UucG9zLnggLSAxLFxuICAgICAgeTogY3VycmVudFBpZWNlLnBvcy55XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5jYW5QbGFjZUJsb2NrcyhuZXh0UG9zQXJyKSkge1xuICAgICAgdGhpcy5lcmFzZUJsb2NrcyhjdXJyZW50UGllY2UuaWQpO1xuICAgICAgY3VycmVudFBpZWNlLnBvcy54IC09IDE7XG4gICAgICB0aGlzLnNldEJsb2NrcyhuZXh0UG9zQXJyLCBjdXJyZW50UGllY2UpO1xuICAgIH1cbiAgfVxuXG4gIG1vdmVDdXJyZW50UGllY2VUb1JpZ2h0KCkge1xuICAgIGNvbnN0IHtjdXJyZW50UGllY2V9ID0gdGhpcztcbiAgICBjb25zdCBuZXh0UG9zQXJyID0gY3VycmVudFBpZWNlLmdldFBvc0Fycih7XG4gICAgICB4OiBjdXJyZW50UGllY2UucG9zLnggKyAxLFxuICAgICAgeTogY3VycmVudFBpZWNlLnBvcy55XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5jYW5QbGFjZUJsb2NrcyhuZXh0UG9zQXJyKSkge1xuICAgICAgdGhpcy5lcmFzZUJsb2NrcyhjdXJyZW50UGllY2UuaWQpO1xuICAgICAgY3VycmVudFBpZWNlLnBvcy54ICs9IDE7XG4gICAgICB0aGlzLnNldEJsb2NrcyhuZXh0UG9zQXJyLCBjdXJyZW50UGllY2UpO1xuICAgIH1cbiAgfVxuXG4gIG1vdmVDdXJyZW50UGllY2VUb0JvdHRvbSgpIHtcblxuICAgIGNvbnN0IHtjdXJyZW50UGllY2V9ID0gdGhpcztcbiAgICBjb25zdCBuZXh0UG9zQXJyID0gY3VycmVudFBpZWNlLmdldFBvc0Fycih7XG4gICAgICB4OiBjdXJyZW50UGllY2UucG9zLngsXG4gICAgICB5OiBjdXJyZW50UGllY2UucG9zLnkgKyAxXG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5jYW5QbGFjZUJsb2NrcyhuZXh0UG9zQXJyKSkge1xuICAgICAgdGhpcy5lcmFzZUJsb2NrcyhjdXJyZW50UGllY2UuaWQpO1xuICAgICAgY3VycmVudFBpZWNlLnBvcy55ICs9IDE7XG4gICAgICB0aGlzLnNldEJsb2NrcyhuZXh0UG9zQXJyLCBjdXJyZW50UGllY2UpO1xuICAgIH1cbiAgfVxuXG4gIGRyb3BDdXJyZW50UGllY2VBbGxUaGVXYXlUb0JvdHRvbSgpIHtcbiAgICBjb25zdCB7Y3VycmVudFBpZWNlfSA9IHRoaXM7XG4gICAgY29uc3Qge2ZpeGVkUG9zQXJyLCBkZWx0YVl9ID0gdGhpcy5nZXRGaXhlZFBvc0FyckRhdGEoY3VycmVudFBpZWNlLmdldFBvc0FycigpKTtcbiAgICB0aGlzLmVyYXNlQmxvY2tzKGN1cnJlbnRQaWVjZS5pZCk7XG4gICAgdGhpcy5zZXRCbG9ja3MoZml4ZWRQb3NBcnIsIGN1cnJlbnRQaWVjZSk7XG4gICAgdGhpcy5jbGVhclJvd0lmTmVlZGVkKCk7XG4gICAgdGhpcy5zZXROZXdQaWVjZSgpO1xuICB9XG5cbiAgcm90YXRlQ3VycmVudFBpZWNlKCkge1xuICAgIGNvbnN0IHtjdXJyZW50UGllY2V9ID0gdGhpcztcbiAgICBjb25zdCBuZXh0Um90YXRlSW5kZXggPSAoY3VycmVudFBpZWNlLnJvdGF0ZUluZGV4ICsgMSkgJSBjdXJyZW50UGllY2UudGV0cm9taW5vLmNvb3Jkcy5sZW5ndGg7XG4gICAgY29uc3QgbmV4dENvb3JkID0gY3VycmVudFBpZWNlLnRldHJvbWluby5jb29yZHNbbmV4dFJvdGF0ZUluZGV4XTtcbiAgICBjb25zdCBuZXh0UG9zQXJyID0gY3VycmVudFBpZWNlLmdldFBvc0FycihjdXJyZW50UGllY2UucG9zLCBuZXh0Q29vcmQpO1xuXG4gICAgaWYgKHRoaXMuY2FuUGxhY2VCbG9ja3MobmV4dFBvc0FycikpIHtcbiAgICAgIHRoaXMuZXJhc2VCbG9ja3MoY3VycmVudFBpZWNlLmlkKTtcbiAgICAgIGN1cnJlbnRQaWVjZS5yb3RhdGVJbmRleCA9IG5leHRSb3RhdGVJbmRleDtcbiAgICAgIGN1cnJlbnRQaWVjZS5jb29yZCA9IGN1cnJlbnRQaWVjZS50ZXRyb21pbm8uY29vcmRzW25leHRSb3RhdGVJbmRleF07XG4gICAgICB0aGlzLnNldEJsb2NrcyhuZXh0UG9zQXJyLCBjdXJyZW50UGllY2UpO1xuICAgIH1cbiAgfVxuXG4gIG9uKGV2ZW50OiBzdHJpbmcsIGZ1bmMpIHtcbiAgICB0aGlzLmV2ZW50RW1pdHRlci5vbihldmVudCwgZnVuYyk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZXZlbnRFbWl0dGVyLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgdGhpcy5sZXZlbCA9IDE7XG4gICAgdGhpcy5zY29yZSA9IDA7XG4gICAgdGhpcy5pc1N0YXJ0ZWQgPSB0cnVlO1xuICAgIHRoaXMuZXZlbnRFbWl0dGVyLmVtaXQoJ2dhbWVzdGFydCcpO1xuICAgIHRoaXMuaW5pdE1hdHJpeCgpO1xuICAgIHRoaXMuc2V0TmV3UGllY2UoKTtcbiAgICB0aGlzLnRocm93TmV3UGllY2UoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2FtZU92ZXIoKSB7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTtcbiAgICB0aGlzLmlzU3RhcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZXZlbnRFbWl0dGVyLmVtaXQoJ2dhbWVvdmVyJyk7XG4gIH1cbn1cbiIsImltcG9ydCBUZXRyaXMgZnJvbSAnLi90ZXRyaXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXRyaXNEb20gZXh0ZW5kcyBUZXRyaXMge1xuXG4gIHByaXZhdGUgZWxlbWVudDogSFRNTEVsZW1lbnQ7XG5cbiAgcHJpdmF0ZSBpc0FuaW1hdGluZzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByaXZhdGUgbGFzdEh0bWw6IHN0cmluZyA9ICcnO1xuXG4gIHByaXZhdGUgYmluZGVkSGFuZGxlS2V5RG93bjogKCkgPT4gdm9pZDtcblxuICBjb25zdHJ1Y3RvcihlbGVtZW50OiBIVE1MRWxlbWVudCwgb3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuZXZlbnRFbWl0dGVyLm9uKCdnYW1lb3ZlcicsICgpID0+IHtcbiAgICAgIHRoaXMuc3RvcEFuaW1hdGlvbkxvb3AoKVxuICAgIH0sIGZhbHNlKTtcbiAgfVxuXG4gIGRyYXcoKSB7XG4gICAgY29uc3Qge2VsZW1lbnR9ID0gdGhpcztcbiAgICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSB0aGlzLm9wdGlvbjtcbiAgICBjb25zdCBodG1sID0gdGhpcy5tYXRyaXgubWFwKHJvdyA9PiB7XG4gICAgICBjb25zdCB0ZHMgPSByb3cubWFwKGJsb2NrID0+IHtcbiAgICAgICAgY29uc3QgY3NzQ2xhc3NlcyA9IFtgY29sb3ItJHtibG9jay5sYWJlbH1gXTtcbiAgICAgICAgaWYgKGJsb2NrLmlzUHNldWRvKSB7XG4gICAgICAgICAgY3NzQ2xhc3Nlcy5wdXNoKCdwc2V1ZG8nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYDx0ZCBjbGFzcz1cIiR7Y3NzQ2xhc3Nlcy5qb2luKCcgJyl9XCI+PC90ZD5gO1xuICAgICAgfSkuam9pbignJyk7XG4gICAgICByZXR1cm4gYDx0cj4ke3Rkc308L3RyPmA7XG4gICAgfSkuam9pbignJyk7XG5cbiAgICBpZiAodGhpcy5sYXN0SHRtbCAhPT0gaHRtbCkge1xuICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgdGhpcy5sYXN0SHRtbCA9IGh0bWw7XG4gICAgfVxuICB9XG5cbiAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5iaW5kZWRIYW5kbGVLZXlEb3duID0gdGhpcy5oYW5kbGVLZXlEb3duLmJpbmQodGhpcyk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuYmluZGVkSGFuZGxlS2V5RG93biwgZmFsc2UpO1xuICB9XG5cbiAgaGFuZGxlS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuXG4gICAgaWYgKCEgdGhpcy5pc1N0YXJ0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7Y29kZX0gPSBldmVudDtcblxuICAgIGlmICgnQXJyb3dMZWZ0JyA9PT0gY29kZSkge1xuICAgICAgdGhpcy5tb3ZlQ3VycmVudFBpZWNlVG9MZWZ0KCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCdBcnJvd1JpZ2h0JyA9PT0gY29kZSkge1xuICAgICAgdGhpcy5tb3ZlQ3VycmVudFBpZWNlVG9SaWdodCgpO1xuICAgIH1cbiAgICBlbHNlIGlmICgnQXJyb3dEb3duJyA9PT0gY29kZSkge1xuICAgICAgdGhpcy5tb3ZlQ3VycmVudFBpZWNlVG9Cb3R0b20oKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoJ0Fycm93VXAnID09PSBjb2RlKSB7XG4gICAgICB0aGlzLnJvdGF0ZUN1cnJlbnRQaWVjZSgpO1xuICAgIH1cbiAgICBlbHNlIGlmICgnU3BhY2UnID09PSBjb2RlKSB7XG4gICAgICB0aGlzLmRyb3BDdXJyZW50UGllY2VBbGxUaGVXYXlUb0JvdHRvbSgpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmJpbmRlZEhhbmRsZUtleURvd24sIGZhbHNlKTtcbiAgfVxuXG4gIHN0YXJ0QW5pbWF0aW9uTG9vcCgpIHtcblxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHNlbGYuaXNBbmltYXRpbmcgPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gbG9vcCgpIHtcblxuICAgICAgaWYgKCEgc2VsZi5pc0FuaW1hdGluZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZWxmLmRyYXcoKTtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgICB9XG4gICAgbG9vcCgpO1xuICB9XG5cbiAgc3RvcEFuaW1hdGlvbkxvb3AoKSB7XG4gICAgdGhpcy5pc0FuaW1hdGluZyA9IGZhbHNlO1xuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgc3VwZXIuc3RhcnQoKTtcbiAgICB0aGlzLnN0YXJ0QW5pbWF0aW9uTG9vcCgpO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgdGhpcy5zdG9wQW5pbWF0aW9uTG9vcCgpO1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxufVxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbmJ1dHRvbiB7XFxuICBvdXRsaW5lOiAwO1xcbn1cXG4uZ2FtZS1ib3kge1xcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gIHBhZGRpbmc6IDEwcHggMDtcXG4gIG1hcmdpbjogYXV0bztcXG4gIHdpZHRoOiAzMjBweDtcXG4gIGhlaWdodDogNTgwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xcbn1cXG4udG9wYmFyIHtcXG4gIHBhZGRpbmc6IDdweCAxNHB4IDRweDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBtYXJnaW46IDAgYXV0bztcXG59XFxuXFxuLnRldHJpcy1jb250YWluZXIge1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMjYwcHg7XFxuICBoZWlnaHQ6IDQ0MHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIHBhZGRpbmctYm90dG9tOiAxNHB4O1xcbn1cXG5cXG4udGV0cmlzLWNvbnRhaW5lcl9fcGFnZV9fcGFkLXNjb3JlIHtcXG4gIG1hcmdpbjogMDtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGNvbG9yOiAjMDAwO1xcbiAgcGFkZGluZy1ib3R0b206IDIwcHg7XFxufVxcblxcbi50ZXRyaXMtY29udGFpbmVyX19wYWdlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC42KTtcXG59XFxuLnRldHJpcy1jb250YWluZXJfX3BhZ2UgaDEge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwYWRkaW5nOiAyMHB4IDA7XFxuICBtYXJnaW4tYm90dG9tOiAwO1xcbiAgbWFyZ2luLXRvcDogMTIwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgZm9udC1zaXplOiA0MHB4O1xcbn1cXG5cXG4udGV0cmlzLWNvbnRhaW5lcl9fcGFnZV9fYnRuIHtcXG4gIG1hcmdpbi10b3A6IDMwcHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBmb250LXdlaWdodDogOTAwO1xcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gIGZvbnQtc2l6ZTogMzBweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBjb2xvcjogIzAwMDtcXG4gIHBhZGRpbmc6IDdweCAxNHB4O1xcbiAgYm9yZGVyOiA0cHggc29saWQgIzMzMztcXG59XFxuXFxuLnRldHJpcy1jb250YWluZXJfX3RldHJpcy1tYXRyaXgge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbn1cXG5cXG4udGV0cmlzLWNvbnRhaW5lcl9fdGV0cmlzLW1hdHJpeCB0ZC5wc2V1ZG8ge1xcbiAgb3BhY2l0eTogMC4zO1xcbn1cXG5cXG4udGV0cmlzLWNvbnRhaW5lcl9fdGV0cmlzLW1hdHJpeCB0ZCB7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xcbiAgd2lkdGg6IDE4cHg7XFxuICBoZWlnaHQ6IDE4cHg7XFxufVxcblxcbi50ZXRyaXMtY29udGFpbmVyX190ZXRyaXMtbWF0cml4IHRkLmNvbG9yLUkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U3NGMzYztcXG59XFxuXFxuLnRldHJpcy1jb250YWluZXJfX3RldHJpcy1tYXRyaXggdGQuY29sb3ItSiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTY3ZTIyO1xcbn1cXG5cXG4udGV0cmlzLWNvbnRhaW5lcl9fdGV0cmlzLW1hdHJpeCB0ZC5jb2xvci1MIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMWM0MGY7XFxufVxcblxcbi50ZXRyaXMtY29udGFpbmVyX190ZXRyaXMtbWF0cml4IHRkLmNvbG9yLU8ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFhYmM5YztcXG59XFxuXFxuLnRldHJpcy1jb250YWluZXJfX3RldHJpcy1tYXRyaXggdGQuY29sb3ItUyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmVjYzcxO1xcbn1cXG5cXG4udGV0cmlzLWNvbnRhaW5lcl9fdGV0cmlzLW1hdHJpeCB0ZC5jb2xvci1UIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzNDk4ZGI7XFxufVxcblxcbi50ZXRyaXMtY29udGFpbmVyX190ZXRyaXMtbWF0cml4IHRkLmNvbG9yLVQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzliNTliNjtcXG59XFxuXFxuLnRldHJpcy1jb250YWluZXJfX3RldHJpcy1tYXRyaXggdGQuY29sb3ItWiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzQ0OTVlO1xcbn1cXG5cXG4uaGlkZGVuIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5ncm91cC1idG4tYXJyb3dzIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNjY2M7XFxuICBwYWRkaW5nOiAxNHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMTAwJTtcXG4gIHdpZHRoOiAxMjBweDtcXG59XFxuLmdyb3VwLWJ0bi1hcnJvd3NfX3JvdyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcbi5ncm91cC1idG4tYXJyb3dzX19yb3dfX2J0biB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2UzNDM5O1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMjZweDtcXG4gIGhlaWdodDogMjZweDtcXG59XFxuLmdyb3VwLWJ0bi1hcnJvd3NfX3Jvd19fYnRuLXVwIHtcXG4gIGJvcmRlci10b3A6IDJweCBzb2xpZCAjMmIyNTI4O1xcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjMmIyNTI4O1xcbiAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgIzJiMjUyODtcXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjM2UzNDM5O1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogNnB4O1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDZweDtcXG59XFxuLmdyb3VwLWJ0bi1hcnJvd3NfX3Jvd19fYnRuLWxlZnQge1xcbiAgYm9yZGVyLXRvcDogMnB4IHNvbGlkICMyYjI1Mjg7XFxuICBib3JkZXItbGVmdDogMnB4IHNvbGlkICMyYjI1Mjg7XFxuICBib3JkZXItcmlnaHQ6IDJweCBzb2xpZCAjM2UzNDM5O1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICMzZTM0Mzk7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiA2cHg7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiA2cHg7XFxufVxcbi5ncm91cC1idG4tYXJyb3dzX19yb3dfX2J0bi1kb3duIHtcXG4gIGJvcmRlci10b3A6IDJweCBzb2xpZCAjM2UzNDM5O1xcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjMmIyNTI4O1xcbiAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgIzJiMjUyODtcXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjM2UzNDM5O1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogNnB4O1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDZweDtcXG59XFxuLmdyb3VwLWJ0bi1hcnJvd3NfX3Jvd19fYnRuLWVtcHR5IHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICMzZTM0Mzk7XFxufVxcbi5ncm91cC1idG4tYXJyb3dzX19yb3dfX2J0bi1yaWdodCB7XFxuICBib3JkZXItdG9wOiAycHggc29saWQgIzJiMjUyODtcXG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgIzNlMzQzOTtcXG4gIGJvcmRlci1yaWdodDogMnB4IHNvbGlkICMyYjI1Mjg7XFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgIzJiMjUyODtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA2cHg7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogNnB4O1xcbn1cXG4uZ2FtZS1jb250cm9sbGVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBtaW4td2lkdGg6IDMwMHB4O1xcbiAgcGFkZGluZzogMTJweCAxNHB4IDEwcHg7XFxufVxcbi5ncm91cC1idG4tZnVuY3Rpb25zIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNjY2M7XFxuICBoZWlnaHQ6IDU2cHg7XFxuICB3aWR0aDogMTIwcHg7XFxuICBwYWRkaW5nOiA2cHggMnB4O1xcbiAgYm9yZGVyLXJhZGl1czogNDBweDtcXG4gIHRyYW5zZm9ybTogcm90YXRlKC0zMGRlZyk7XFxuICBtYXJnaW4tdG9wOiAzMHB4O1xcbn1cXG4uZ3JvdXAtYnRuLWZ1bmN0aW9uc19fYnRuIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM3OTNjNTk7XFxuICBib3JkZXI6IDNweCBzb2xpZCAjM2UzNDM5O1xcbiAgd2lkdGg6IDQ0cHg7XFxuICBoZWlnaHQ6IDQ0cHg7XFxuICBib3JkZXItcmFkaXVzOiAxMDAlO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9pbmRleC5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vaW5kZXguY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9pbmRleC5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIvKiEgbm9ybWFsaXplLmNzcyB2OC4wLjAgfCBNSVQgTGljZW5zZSB8IGdpdGh1Yi5jb20vbmVjb2xhcy9ub3JtYWxpemUuY3NzICovXFxuXFxuLyogRG9jdW1lbnRcXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi8qKlxcbiAqIDEuIENvcnJlY3QgdGhlIGxpbmUgaGVpZ2h0IGluIGFsbCBicm93c2Vycy5cXG4gKiAyLiBQcmV2ZW50IGFkanVzdG1lbnRzIG9mIGZvbnQgc2l6ZSBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2VzIGluIGlPUy5cXG4gKi9cXG5cXG5odG1sIHtcXG4gIGxpbmUtaGVpZ2h0OiAxLjE1OyAvKiAxICovXFxuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cXG59XFxuXFxuLyogU2VjdGlvbnNcXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi8qKlxcbiAqIFJlbW92ZSB0aGUgbWFyZ2luIGluIGFsbCBicm93c2Vycy5cXG4gKi9cXG5cXG5ib2R5IHtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuLyoqXFxuICogQ29ycmVjdCB0aGUgZm9udCBzaXplIGFuZCBtYXJnaW4gb24gYGgxYCBlbGVtZW50cyB3aXRoaW4gYHNlY3Rpb25gIGFuZFxcbiAqIGBhcnRpY2xlYCBjb250ZXh0cyBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBTYWZhcmkuXFxuICovXFxuXFxuaDEge1xcbiAgZm9udC1zaXplOiAyZW07XFxuICBtYXJnaW46IDAuNjdlbSAwO1xcbn1cXG5cXG4vKiBHcm91cGluZyBjb250ZW50XFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4vKipcXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3QgYm94IHNpemluZyBpbiBGaXJlZm94LlxcbiAqIDIuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UgYW5kIElFLlxcbiAqL1xcblxcbmhyIHtcXG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94OyAvKiAxICovXFxuICBoZWlnaHQ6IDA7IC8qIDEgKi9cXG4gIG92ZXJmbG93OiB2aXNpYmxlOyAvKiAyICovXFxufVxcblxcbi8qKlxcbiAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXFxuICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxcbiAqL1xcblxcbnByZSB7XFxuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7IC8qIDEgKi9cXG4gIGZvbnQtc2l6ZTogMWVtOyAvKiAyICovXFxufVxcblxcbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzXFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4vKipcXG4gKiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBvbiBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXFxuICovXFxuXFxuYSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLyoqXFxuICogMS4gUmVtb3ZlIHRoZSBib3R0b20gYm9yZGVyIGluIENocm9tZSA1Ny1cXG4gKiAyLiBBZGQgdGhlIGNvcnJlY3QgdGV4dCBkZWNvcmF0aW9uIGluIENocm9tZSwgRWRnZSwgSUUsIE9wZXJhLCBhbmQgU2FmYXJpLlxcbiAqL1xcblxcbmFiYnJbdGl0bGVdIHtcXG4gIGJvcmRlci1ib3R0b206IG5vbmU7IC8qIDEgKi9cXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyAvKiAyICovXFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7IC8qIDIgKi9cXG59XFxuXFxuLyoqXFxuICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgd2VpZ2h0IGluIENocm9tZSwgRWRnZSwgYW5kIFNhZmFyaS5cXG4gKi9cXG5cXG5iLFxcbnN0cm9uZyB7XFxuICBmb250LXdlaWdodDogYm9sZGVyO1xcbn1cXG5cXG4vKipcXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmhlcml0YW5jZSBhbmQgc2NhbGluZyBvZiBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxcbiAqIDIuIENvcnJlY3QgdGhlIG9kZCBgZW1gIGZvbnQgc2l6aW5nIGluIGFsbCBicm93c2Vycy5cXG4gKi9cXG5cXG5jb2RlLFxcbmtiZCxcXG5zYW1wIHtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTsgLyogMSAqL1xcbiAgZm9udC1zaXplOiAxZW07IC8qIDIgKi9cXG59XFxuXFxuLyoqXFxuICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXFxuICovXFxuXFxuc21hbGwge1xcbiAgZm9udC1zaXplOiA4MCU7XFxufVxcblxcbi8qKlxcbiAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGVsZW1lbnRzIGZyb20gYWZmZWN0aW5nIHRoZSBsaW5lIGhlaWdodCBpblxcbiAqIGFsbCBicm93c2Vycy5cXG4gKi9cXG5cXG5zdWIsXFxuc3VwIHtcXG4gIGZvbnQtc2l6ZTogNzUlO1xcbiAgbGluZS1oZWlnaHQ6IDA7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XFxufVxcblxcbnN1YiB7XFxuICBib3R0b206IC0wLjI1ZW07XFxufVxcblxcbnN1cCB7XFxuICB0b3A6IC0wLjVlbTtcXG59XFxuXFxuLyogRW1iZWRkZWQgY29udGVudFxcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyoqXFxuICogUmVtb3ZlIHRoZSBib3JkZXIgb24gaW1hZ2VzIGluc2lkZSBsaW5rcyBpbiBJRSAxMC5cXG4gKi9cXG5cXG5pbWcge1xcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xcbn1cXG5cXG4vKiBGb3Jtc1xcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyoqXFxuICogMS4gQ2hhbmdlIHRoZSBmb250IHN0eWxlcyBpbiBhbGwgYnJvd3NlcnMuXFxuICogMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxcbiAqL1xcblxcbmJ1dHRvbixcXG5pbnB1dCxcXG5vcHRncm91cCxcXG5zZWxlY3QsXFxudGV4dGFyZWEge1xcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7IC8qIDEgKi9cXG4gIGZvbnQtc2l6ZTogMTAwJTsgLyogMSAqL1xcbiAgbGluZS1oZWlnaHQ6IDEuMTU7IC8qIDEgKi9cXG4gIG1hcmdpbjogMDsgLyogMiAqL1xcbn1cXG5cXG4vKipcXG4gKiBTaG93IHRoZSBvdmVyZmxvdyBpbiBJRS5cXG4gKiAxLiBTaG93IHRoZSBvdmVyZmxvdyBpbiBFZGdlLlxcbiAqL1xcblxcbmJ1dHRvbixcXG5pbnB1dCB7IC8qIDEgKi9cXG4gIG92ZXJmbG93OiB2aXNpYmxlO1xcbn1cXG5cXG4vKipcXG4gKiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEVkZ2UsIEZpcmVmb3gsIGFuZCBJRS5cXG4gKiAxLiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEZpcmVmb3guXFxuICovXFxuXFxuYnV0dG9uLFxcbnNlbGVjdCB7IC8qIDEgKi9cXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xcbn1cXG5cXG4vKipcXG4gKiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxcbiAqL1xcblxcbmJ1dHRvbixcXG5bdHlwZT1cXFwiYnV0dG9uXFxcIl0sXFxuW3R5cGU9XFxcInJlc2V0XFxcIl0sXFxuW3R5cGU9XFxcInN1Ym1pdFxcXCJdIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uO1xcbn1cXG5cXG4vKipcXG4gKiBSZW1vdmUgdGhlIGlubmVyIGJvcmRlciBhbmQgcGFkZGluZyBpbiBGaXJlZm94LlxcbiAqL1xcblxcbmJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcixcXG5bdHlwZT1cXFwiYnV0dG9uXFxcIl06Oi1tb3otZm9jdXMtaW5uZXIsXFxuW3R5cGU9XFxcInJlc2V0XFxcIl06Oi1tb3otZm9jdXMtaW5uZXIsXFxuW3R5cGU9XFxcInN1Ym1pdFxcXCJdOjotbW96LWZvY3VzLWlubmVyIHtcXG4gIGJvcmRlci1zdHlsZTogbm9uZTtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbi8qKlxcbiAqIFJlc3RvcmUgdGhlIGZvY3VzIHN0eWxlcyB1bnNldCBieSB0aGUgcHJldmlvdXMgcnVsZS5cXG4gKi9cXG5cXG5idXR0b246LW1vei1mb2N1c3JpbmcsXFxuW3R5cGU9XFxcImJ1dHRvblxcXCJdOi1tb3otZm9jdXNyaW5nLFxcblt0eXBlPVxcXCJyZXNldFxcXCJdOi1tb3otZm9jdXNyaW5nLFxcblt0eXBlPVxcXCJzdWJtaXRcXFwiXTotbW96LWZvY3VzcmluZyB7XFxuICBvdXRsaW5lOiAxcHggZG90dGVkIEJ1dHRvblRleHQ7XFxufVxcblxcbi8qKlxcbiAqIENvcnJlY3QgdGhlIHBhZGRpbmcgaW4gRmlyZWZveC5cXG4gKi9cXG5cXG5maWVsZHNldCB7XFxuICBwYWRkaW5nOiAwLjM1ZW0gMC43NWVtIDAuNjI1ZW07XFxufVxcblxcbi8qKlxcbiAqIDEuIENvcnJlY3QgdGhlIHRleHQgd3JhcHBpbmcgaW4gRWRnZSBhbmQgSUUuXFxuICogMi4gQ29ycmVjdCB0aGUgY29sb3IgaW5oZXJpdGFuY2UgZnJvbSBgZmllbGRzZXRgIGVsZW1lbnRzIGluIElFLlxcbiAqIDMuIFJlbW92ZSB0aGUgcGFkZGluZyBzbyBkZXZlbG9wZXJzIGFyZSBub3QgY2F1Z2h0IG91dCB3aGVuIHRoZXkgemVybyBvdXRcXG4gKiAgICBgZmllbGRzZXRgIGVsZW1lbnRzIGluIGFsbCBicm93c2Vycy5cXG4gKi9cXG5cXG5sZWdlbmQge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xcbiAgY29sb3I6IGluaGVyaXQ7IC8qIDIgKi9cXG4gIGRpc3BsYXk6IHRhYmxlOyAvKiAxICovXFxuICBtYXgtd2lkdGg6IDEwMCU7IC8qIDEgKi9cXG4gIHBhZGRpbmc6IDA7IC8qIDMgKi9cXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7IC8qIDEgKi9cXG59XFxuXFxuLyoqXFxuICogQWRkIHRoZSBjb3JyZWN0IHZlcnRpY2FsIGFsaWdubWVudCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cXG4gKi9cXG5cXG5wcm9ncmVzcyB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XFxufVxcblxcbi8qKlxcbiAqIFJlbW92ZSB0aGUgZGVmYXVsdCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gSUUgMTArLlxcbiAqL1xcblxcbnRleHRhcmVhIHtcXG4gIG92ZXJmbG93OiBhdXRvO1xcbn1cXG5cXG4vKipcXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3QgYm94IHNpemluZyBpbiBJRSAxMC5cXG4gKiAyLiBSZW1vdmUgdGhlIHBhZGRpbmcgaW4gSUUgMTAuXFxuICovXFxuXFxuW3R5cGU9XFxcImNoZWNrYm94XFxcIl0sXFxuW3R5cGU9XFxcInJhZGlvXFxcIl0ge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xcbiAgcGFkZGluZzogMDsgLyogMiAqL1xcbn1cXG5cXG4vKipcXG4gKiBDb3JyZWN0IHRoZSBjdXJzb3Igc3R5bGUgb2YgaW5jcmVtZW50IGFuZCBkZWNyZW1lbnQgYnV0dG9ucyBpbiBDaHJvbWUuXFxuICovXFxuXFxuW3R5cGU9XFxcIm51bWJlclxcXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxcblt0eXBlPVxcXCJudW1iZXJcXFwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XFxuICBoZWlnaHQ6IGF1dG87XFxufVxcblxcbi8qKlxcbiAqIDEuIENvcnJlY3QgdGhlIG9kZCBhcHBlYXJhbmNlIGluIENocm9tZSBhbmQgU2FmYXJpLlxcbiAqIDIuIENvcnJlY3QgdGhlIG91dGxpbmUgc3R5bGUgaW4gU2FmYXJpLlxcbiAqL1xcblxcblt0eXBlPVxcXCJzZWFyY2hcXFwiXSB7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDsgLyogMSAqL1xcbiAgb3V0bGluZS1vZmZzZXQ6IC0ycHg7IC8qIDIgKi9cXG59XFxuXFxuLyoqXFxuICogUmVtb3ZlIHRoZSBpbm5lciBwYWRkaW5nIGluIENocm9tZSBhbmQgU2FmYXJpIG9uIG1hY09TLlxcbiAqL1xcblxcblt0eXBlPVxcXCJzZWFyY2hcXFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxufVxcblxcbi8qKlxcbiAqIDEuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXFxuICogMi4gQ2hhbmdlIGZvbnQgcHJvcGVydGllcyB0byBgaW5oZXJpdGAgaW4gU2FmYXJpLlxcbiAqL1xcblxcbjo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b24ge1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247IC8qIDEgKi9cXG4gIGZvbnQ6IGluaGVyaXQ7IC8qIDIgKi9cXG59XFxuXFxuLyogSW50ZXJhY3RpdmVcXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi8qXFxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gRWRnZSwgSUUgMTArLCBhbmQgRmlyZWZveC5cXG4gKi9cXG5cXG5kZXRhaWxzIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4vKlxcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIGFsbCBicm93c2Vycy5cXG4gKi9cXG5cXG5zdW1tYXJ5IHtcXG4gIGRpc3BsYXk6IGxpc3QtaXRlbTtcXG59XFxuXFxuLyogTWlzY1xcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyoqXFxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgMTArLlxcbiAqL1xcblxcbnRlbXBsYXRlIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi8qKlxcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDEwLlxcbiAqL1xcblxcbltoaWRkZW5dIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4vbm9ybWFsaXplLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4vbm9ybWFsaXplLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9ub3JtYWxpemUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiaW1wb3J0ICdub3JtYWxpemUuY3NzJztcbmltcG9ydCAnLi9pbmRleC5jc3MnO1xuaW1wb3J0IFRldHJpc0RvbSBmcm9tICcuL3RldHJpcy1kb20nO1xuXG5jb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hdHJpeCcpO1xuY29uc3QgZ2FtZSA9IG5ldyBUZXRyaXNEb20oZWxlbWVudCwge3dpZHRoOiAxMCwgaGVpZ2h0OiAyMH0pO1xuY29uc3QgcGFnZUhvbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFnZS1ob21lJyk7XG5jb25zdCBwYWdlR2FtZU92ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFnZS1nYW1lLW92ZXInKTtcbmNvbnN0IGJ0blN0YXJ0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bi1zdGFydCcpO1xuY29uc3QgYnRuUGxheUFnYWluID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bi1wbGF5LWFnYWluJyk7XG5jb25zdCB0b3BiYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9wYmFyJyk7XG5jb25zdCB0b3BiYXJMZXZlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b3BiYXItbGV2ZWwnKTtcbmNvbnN0IHRvcGJhclNjb3JlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvcGJhci1zY29yZScpO1xuY29uc3QgcGFkU2NvcmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFkLXNjb3JlJyk7XG5cbi8vIGJ1dHRvbnMgZm9yIG1vYmlsZVxuY29uc3QgYnRuQXJyb3dVcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4tYXJyb3ctdXAnKTtcbmNvbnN0IGJ0bkFycm93RG93biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4tYXJyb3ctZG93bicpO1xuY29uc3QgYnRuQXJyb3dMZWZ0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bi1hcnJvdy1sZWZ0Jyk7XG5jb25zdCBidG5BcnJvd1JpZ2h0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bi1hcnJvdy1yaWdodCcpO1xuY29uc3QgYnRuQSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4tYScpO1xuY29uc3QgYnRuQiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4tYicpO1xuXG5nYW1lLm9uKCdnYW1lc3RhcnQnLCAoKSA9PiB7XG4gIHRvcGJhckxldmVsLnRleHRDb250ZW50ID0gYExldmVsOiAke2dhbWUubGV2ZWx9YDtcbiAgdG9wYmFyU2NvcmUudGV4dENvbnRlbnQgPSBgU2NvcmU6ICR7Z2FtZS5zY29yZX1gO1xufSk7XG5cbmdhbWUub24oJ2NoYW5nZScsICgpID0+IHtcbiAgdG9wYmFyTGV2ZWwudGV4dENvbnRlbnQgPSBgTGV2ZWw6ICR7Z2FtZS5sZXZlbH1gO1xuICB0b3BiYXJTY29yZS50ZXh0Q29udGVudCA9IGBTY29yZTogJHtnYW1lLnNjb3JlfWA7XG59KTtcblxuZ2FtZS5vbignZ2FtZW92ZXInLCAoKSA9PiB7XG4gIHBhZ2VHYW1lT3Zlci5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgcGFkU2NvcmUuaW5uZXJIVE1MID0gYFlvdXIgU2NvcmU6ICR7Z2FtZS5zY29yZX1gO1xufSk7XG5cbmNvbnN0IHN0YXJ0R2FtZSA9IChldmVudCkgPT4ge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBnYW1lLnN0YXJ0KClcbiAgdG9wYmFyLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICBwYWdlSG9tZS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgcGFnZUdhbWVPdmVyLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xufTtcblxuYnRuU3RhcnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzdGFydEdhbWUsIGZhbHNlKTtcblxuYnRuUGxheUFnYWluLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc3RhcnRHYW1lLCBmYWxzZSk7XG5cbmJ0bkFycm93VXAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBnYW1lLmlzU3RhcnRlZCAmJiBnYW1lLnJvdGF0ZUN1cnJlbnRQaWVjZSgpLCBmYWxzZSk7XG5idG5BcnJvd0Rvd24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBnYW1lLmlzU3RhcnRlZCAmJiBnYW1lLm1vdmVDdXJyZW50UGllY2VUb0JvdHRvbSgpLCBmYWxzZSk7XG5idG5BcnJvd0xlZnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBnYW1lLmlzU3RhcnRlZCAmJiBnYW1lLm1vdmVDdXJyZW50UGllY2VUb0xlZnQoKSwgZmFsc2UpO1xuYnRuQXJyb3dSaWdodC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGdhbWUuaXNTdGFydGVkICYmIGdhbWUubW92ZUN1cnJlbnRQaWVjZVRvUmlnaHQoKSwgZmFsc2UpO1xuXG5idG5BLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGlmIChnYW1lLmlzU3RhcnRlZCkge1xuICAgIGdhbWUucm90YXRlQ3VycmVudFBpZWNlKCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgc3RhcnRHYW1lKGV2ZW50KTtcbiAgfVxufSwgZmFsc2UpO1xuXG5idG5CLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGlmIChnYW1lLmlzU3RhcnRlZCkge1xuICAgIGdhbWUuZHJvcEN1cnJlbnRQaWVjZUFsbFRoZVdheVRvQm90dG9tKCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgc3RhcnRHYW1lKGV2ZW50KTtcbiAgfVxufSwgZmFsc2UpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==